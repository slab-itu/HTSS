article id="http://dx.doi.org/10.1371/journal.pone.0144795"  #@NEW_LINE#@#  
title  #@NEW_LINE#@#  
Making Activity Recognition Robust against Deceptive Behavior  #@NEW_LINE#@#  

Abstract  #@NEW_LINE#@#  
Healthcare services increasingly use the activity recognition technology to track the daily activities of individuals.  #@NEW_LINE#@#  In some cases, this is used to provide incentives.  #@NEW_LINE#@#  For example, some health insurance companies offer discount to customers who are physically active, based on the data collected from their activity tracking devices.  #@NEW_LINE#@#  Therefore, there is an increasing motivation for individuals to cheat, by making activity trackers detect activities that increase their benefits rather than the ones they actually do.  #@NEW_LINE#@#  In this study, we used a novel method to make activity recognition robust against deceptive behavior.  #@NEW_LINE#@#  We asked 14 subjects to attempt to trick our smartphone-based activity classifier by making it detect an activity other than the one they actually performed, for example by shaking the phone while seated to make the classifier detect walking.  #@NEW_LINE#@#  If they succeeded, we used their motion data to retrain the classifier, and asked them to try to trick it again.  #@NEW_LINE#@#  The experiment ended when subjects could no longer cheat.  #@NEW_LINE#@#  We found that some subjects were not able to trick the classifier at all, while others required five rounds of retraining.  #@NEW_LINE#@#  While classifiers trained on normal activity data predicted true activity with ~38% accuracy, training on the data gathered during the deceptive behavior increased their accuracy to ~84%.  #@NEW_LINE#@#  We conclude that learning the deceptive behavior of one individual helps to detect the deceptive behavior of others.  #@NEW_LINE#@#  Thus, we can make current activity recognition robust to deception by including deceptive activity data from a few individuals.  #@NEW_LINE#@#  

Citation: Saeb S, Körding K, Mohr DC (2015) Making Activity Recognition Robust against Deceptive Behavior.  #@NEW_LINE#@#  PLoS ONE 10(12):  #@NEW_LINE#@#  
           e0144795.  #@NEW_LINE#@#  

        https://doi.org/10.1371/journal.pone.0144795  #@NEW_LINE#@#  
Editor: Friedhelm Schwenker, Ulm University, GERMANY  #@NEW_LINE#@#  
Received: July 24, 2015; Accepted: November 24, 2015; Published:  December 11, 2015  #@NEW_LINE#@#  
Copyright:  © 2015 Saeb et al.  #@NEW_LINE#@#  This is an open access article distributed under the terms of the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited  #@NEW_LINE#@#  
Data Availability: The data based on which paper figures are generated (classifiers and subjects performance, and low dimensional representation of sensor data) have been uploaded as supporting information files.  #@NEW_LINE#@#  Regarding the mobile sensor data, our participant consent forms restrict us from sharing them with other researchers.  #@NEW_LINE#@#  Here is the related part of the form: "The mobile phone that you carry during the experiment will collect data on movement, temperature, atmospheric pressure, and sounds in the laboratory environment, and if you choose, your activities during the experiment will be recorded by a video camera.  #@NEW_LINE#@#  All these information, however, is stored in a format that contains no identifying information about you.  #@NEW_LINE#@#  They are stored on secure servers and are only accessible by the investigators who conduct the study."  #@NEW_LINE#@#  Therefore, we are legally and ethically restricted to share mobile sensor data.  #@NEW_LINE#@#  
Funding: This research was funded by research grants P20MH090318 and R01MH100482 from the US National Institute of Mental Health: https://www.nimh.nih.gov.  #@NEW_LINE#@#  The funder had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.  #@NEW_LINE#@#  
Competing interests:  The authors have declared that no competing interests exist.  #@NEW_LINE#@#  
Introduction  #@NEW_LINE#@#  
Human activity recognition based on the data captured from accelerometers, video cameras, and custom-designed sensors has been studied since the 1980s [16].  #@NEW_LINE#@#  Some devices, such as the Microsoft Kinect, are specifically designed to collect data that can easily be used to infer the physical activities of a person [7], however, these devices are neither portable nor ubiquitous.  #@NEW_LINE#@#  Smartphones and wearable activity trackers, on the other hand, offer both portability and popularity.  #@NEW_LINE#@#  These devices usually come with inertial measurement units (IMUs) that can be used to detect the physical activities of their users: whether they are sedentary, walking, running, sitting in a car, etc.  #@NEW_LINE#@#  [8], regardless of where they carry their device [9].  #@NEW_LINE#@#  Thus, smartphones and wearable devices seem ideal platforms for daily-life monitoring of an individuals physical activities.  #@NEW_LINE#@#  
Healthcare providers use mobile and wearable sensor-based activity recognition for a variety of purposes.  #@NEW_LINE#@#  A number of health insurance companies collect activity data from their customers to adjust their risk estimates and costs according to each individuals daily-life behaviors.  #@NEW_LINE#@#  For example, one life insurance company offers 15% discount if their customers are physically active for at least 15 minutes per day [10].  #@NEW_LINE#@#  In other healthcare areas, such as mental health and physical rehabilitation, researchers and clinicians are interested in monitoring the physical activities of their patients in their daily life.  #@NEW_LINE#@#  Researchers might want to detect symptoms of certain disorders and their severity using the activity data recorded from their patients [11, 12].  #@NEW_LINE#@#  Clinicians, on the other hand, might be interested in finding out whether or not their patients follow their advice in doing and/or refraining from certain activities that supposedly improves the outcome of the treatment [13, 14].  #@NEW_LINE#@#  
Whether the goal is to estimate insurance costs or to monitor patients, it is crucial for activity tracking systems to be reliable.  #@NEW_LINE#@#  One source of unreliability can be inaccuracy of the sensors or the failure of the algorithms, which is usually quantified in activity tracking algorithm development.  #@NEW_LINE#@#  A second source, which is currently ignored, is the users behavior.  #@NEW_LINE#@#  In fact, users may deliberately trick activity recognition systems into detecting activities that are different from the ones they actually perform.  #@NEW_LINE#@#  In the health insurance example, users may try to show that they are more active and thereby receive a discount.  #@NEW_LINE#@#  All they need to do is to shake the device while they sit on their couch.  #@NEW_LINE#@#  In a patient monitoring scenario where patients are monitored by an activity tracker to ensure they do not move out of bed without asking for assistance, they might find a way of walking which the activity tracker cannot detect.  #@NEW_LINE#@#  Therefore, as healthcare providers rely more on activity trackers, there is an imminent need to make these systems robust against deceptive behavior.  #@NEW_LINE#@#  
Very few studies have tried to make activity recognition robust against cheating.  #@NEW_LINE#@#  A first attempt was to train a neural network classifier to distinguish between the accelerometer data generated by normal walking from the ones generated by shaking the activity tracker device, however no cross-validation was performed to measure the accuracy of the method [15].  #@NEW_LINE#@#  In a study of the cheating behavior in a soccer video game, researchers used the intensity of motions as an additional feature in order to prevent gamers from cheating by mimicking the actual activity with low effort in a smaller scale [16].  #@NEW_LINE#@#  Finally, a more recent study asked subjects to trick a smartphone-based activity tracker into detecting walking activity while they were seated, by shaking their phones [17].  #@NEW_LINE#@#  This study was able to provide good accuracy on distinguishing between deceptive and normal activities.  #@NEW_LINE#@#  However, it did not examine whether or not the subjects were still able to cheat after the classifier was trained on the cheating data.  #@NEW_LINE#@#  
In this study, we asked subjects to deliberately make our smartphone-based activity classifier fail in two distinct settings: Detect walking while they were sitting on a chair, and detect sitting while they were walking.  #@NEW_LINE#@#  If they succeeded in cheating, we retrained the activity classifier by incorporating fake activity data into its training dataset, and asked the subjects to try to cheat again.  #@NEW_LINE#@#  We continued this procedure until the subjects could no longer cheat.  #@NEW_LINE#@#  To encourage subjects to try their best to trick the classifier, we provided them with a monetary reward each time they succeeded in cheating for an entire round.  #@NEW_LINE#@#  Finally, we investigated whether training a classifier on the deceptive data from one or a few subjects could make it robust against the deceptive behavior of other subjects.  #@NEW_LINE#@#  

Experiment  #@NEW_LINE#@#  
Participants  #@NEW_LINE#@#  
We recruited 14 healthy subjects (5 males and 9 females) within the age range of 23 to 38 years old using advertisements in a Northwestern University newsletter.  #@NEW_LINE#@#  Subjects were eligible for the experiment if they were able to speak and read English and lived in the Chicago area.  #@NEW_LINE#@#  Before the experiment, written informed consent was obtained from each subject.  #@NEW_LINE#@#  The study protocol and the consent procedure was approved by the Northwestern University Institutional Review Board.  #@NEW_LINE#@#  

Activity_Trials  #@NEW_LINE#@#  
The experiment design is summarized in Fig 1.  #@NEW_LINE#@#  At the beginning of the experiment, we handed each subject a Google Nexus 5 smartphone running our activity classifier application (see Mobile Application).  #@NEW_LINE#@#  Then, they went through a number of activity trials while carrying the phone.  #@NEW_LINE#@#  There were two sets of trials:  #@NEW_LINE#@#  


Mobile_Application  #@NEW_LINE#@#  
We developed an Android mobile application and installed it on the smartphone that the subjects carried during the experiment.  #@NEW_LINE#@#  The application collected data from accelerometer and gyroscope sensors, extracted their features, ran an activity classifier on the features, and provided feedback to the subject about the output of the classifier by making a beep sound each time the true activity was detected.  #@NEW_LINE#@#  A copy of the sensor data was also saved and transmitted to a desktop computer to retrain the classifier after each trial.  #@NEW_LINE#@#  
The application consisted of three modules: Data acquisition, feature extraction, and activity classifier.  #@NEW_LINE#@#  In the following, we will explain each of these modules.  #@NEW_LINE#@#  
Data_Acquisition  #@NEW_LINE#@#  
The data acquisition module captured motion data using the accelerometer and gyroscope sensors on the device.  #@NEW_LINE#@#  The accelerometer measured the acceleration along the phones X, Y, and Z axes, and the gyroscope measured the rotational velocity around each of these axes.  #@NEW_LINE#@#  These two sensors complement each other, and allow for the separation of the Earth gravity component of the signals.  #@NEW_LINE#@#  In fact, a recent study showed that maximum accuracy in activity recognition can be achieved by combining these two [18].  #@NEW_LINE#@#  
The accelerometer and gyroscope sensors on a Nexus 5 device can be set to sample at different frequencies, from 15 Hz to 200 Hz.  #@NEW_LINE#@#  Here, we set the sampling frequency for both sensors to 50 Hz, which has been shown to be sufficient for capturing the dynamics of human motion [8].  #@NEW_LINE#@#  

Feature_Extraction  #@NEW_LINE#@#  
The feature extraction module calculated various features of the motion sensor data, which captured the patterns of change in the accelerometer and gyroscope sensor data.  #@NEW_LINE#@#  In fact, one cannot directly use raw sensor data for activity classification as there is a new sample arriving every 20 milliseconds.  #@NEW_LINE#@#  Thus, we extracted features from the raw sensor data and then used these features to perform activity classification.  #@NEW_LINE#@#  
To compute features from the raw sensor data, we divided each of the accelerometer and gyroscope sensor data into frames.  #@NEW_LINE#@#  Each frame was 200 samples long, corresponding to 4 seconds of data.  #@NEW_LINE#@#  The frames also had 75% overlap, meaning that adjacent frames had 150 samples, equivalent to 3 seconds, of sensor data in common.  #@NEW_LINE#@#  Then, we defined and extracted a variety of features from each frame, as listed in Table 1.  #@NEW_LINE#@#  We had previously used this feature set in a study of activity recognition in Parkinsons disease patients [19].  #@NEW_LINE#@#  The features included descriptive statistics, the magnitude of the second to the 20th Fourier transform components, and cross-correlations between the axes of each sensor.  #@NEW_LINE#@#  In total, we extracted 260 features from each frame of the accelerometer and gyroscope sensor data.  #@NEW_LINE#@#  

Activity_Classifier  #@NEW_LINE#@#  
We used random forests [20] as the activity classifier in our mobile application.  #@NEW_LINE#@#  A random forest is an ensemble of decision trees, with each providing a prediction, or vote, about the class the input data belongs to.  #@NEW_LINE#@#  The forests prediction is determined by averaging over the predictions of individual trees.  #@NEW_LINE#@#  Each tree in a random forest only sees a subset of features and a subset of input data samples, which makes the forest less prone to overfitting and a better candidate for generalization to unseen data [21].  #@NEW_LINE#@#  This was the main reason why we chose random forests as activity classifiers.  #@NEW_LINE#@#  
The random forest classifier used the features extracted from motion sensors to distinguish between sitting and walking activities.  #@NEW_LINE#@#  It consisted of 200 decision trees.  #@NEW_LINE#@#  The training dataset for each tree was created by randomly and uniformly sampling from the forests training set.  #@NEW_LINE#@#  In addition, each decision split in a tree randomly sampled 16 out of 260 features, and used a Fisher information gain criterion to determine the best feature out of 16, and the decision boundary.  #@NEW_LINE#@#  The forests predicted class was the class gathering most of the trees votes, and its confidence was the proportion of the number of trees voting for the winning class.  #@NEW_LINE#@#  The activity classifier module was optimized such that it provided the classification results in less than 1 second, so that feedback was provided to the subject in time.  #@NEW_LINE#@#  


Classifier_Training_and_Evaluation  #@NEW_LINE#@#  
Personal_Classifiers  #@NEW_LINE#@#  
In the beginning, we trained a classifier that could distinguish between normal sitting and walking activities of each subject.  #@NEW_LINE#@#  After the subject finished a deceptive activity trial, we retrained the activity classifier using the sensor data collected from that last trial.  #@NEW_LINE#@#  Since this was a computationally demanding process, we used a desktop computer.  #@NEW_LINE#@#  First, we transferred the new accelerometer and gyroscope data to the computer.  #@NEW_LINE#@#  Then, we extracted features from these data and retrained the classifier using MATLAB.  #@NEW_LINE#@#  Finally, we transferred the trained classifier back to the phone using a JavaScript Object Notation (JSON) format.  #@NEW_LINE#@#  This classifier was then used by the mobile application in the next trial.  #@NEW_LINE#@#  

Global_Classifiers  #@NEW_LINE#@#  
To understand how learning the cheating behavior of an individual could be generalized to other individuals, after finishing the experiment on all subjects, we trained another set of classifiers on data from multiple subjects and cross-validated them on the subjects that were not used in training.  #@NEW_LINE#@#  We varied the number of training subjects from 1 to 13.  #@NEW_LINE#@#  This procedure was repeated 10 times with different training and test samples each time.  #@NEW_LINE#@#  
We trained two sets of classifiers.  #@NEW_LINE#@#  One set was trained only on normal activity data which we had obtained at the beginning of the experiments.  #@NEW_LINE#@#  We call these baseline classifiers.  #@NEW_LINE#@#  The other set was trained on both normal and deceptive activity data, which we call expert classifiers.  #@NEW_LINE#@#  To make sure that the comparison between the baseline and the expert classifiers was fair, and that the expert classifiers did not benefit from having larger number of samples in their training set, we created bootstrapped training sets such that the number of training data points for both expert and baseline classifiers was equal.  #@NEW_LINE#@#  
We measured each classifiers performance by measuring its accuracy, sensitivity, and specificity in detecting the true activity.  #@NEW_LINE#@#  


Results  #@NEW_LINE#@#  
We asked subjects to try to trick our activity classifier mobile application by making it detect walking while they were seated and sitting while they were walking.  #@NEW_LINE#@#  When they succeeded in cheating, we used their motion data to retrain the classifier, and asked them to try to trick it again.  #@NEW_LINE#@#  We first wanted to see if it was harder for a subject to trick an activity classifier that had been trained on deceptive activity data.  #@NEW_LINE#@#  The second question was if training classifiers on one or multiple subjects deceptive activity enabled them to become more robust against the deceptive activity of other subjects.  #@NEW_LINE#@#  The data behind visualizations in this section are available in S1 Data.  #@NEW_LINE#@#  
Participants__Success_in_Deceiving_Classifiers  #@NEW_LINE#@#  
First, we quantified how well subjects could cheat over the course of the experiment.  #@NEW_LINE#@#  Four out of 14 subjects were not able to cheat at all from the beginning.  #@NEW_LINE#@#  The rest of the subjects succeeded in between 1 and 3 retraining rounds.  #@NEW_LINE#@#  None of the subjects were able to reach the maximum number of retraining rounds (10).  #@NEW_LINE#@#  Thus, most subjects were able to deceive the classifier to some degree.  #@NEW_LINE#@#  
If the approach is successful, then cheating must get harder over subsequent rounds of the retraining iterations.  #@NEW_LINE#@#  Fig 2 shows the success rate (see Activity Trials) of each subject at each round averaged over walking and sitting trials.  #@NEW_LINE#@#  Indeed, most subjects were very successful in the first cheating trial, with a success rate of above 95%, which gradually fell after each retraining.  #@NEW_LINE#@#  Clearly, the classifier got better over the course of the experiment, making it harder for subjects to cheat.  #@NEW_LINE#@#  
Subjects used a variety of cheating strategies.  #@NEW_LINE#@#  For the fake walking trials, where they were actually sitting on a chair, most subjects shook the phone with their hands as a strategy to trick the classifier.  #@NEW_LINE#@#  Some subjects tried to put the phone in their pocket and move their torso or legs to induce sensor readings that were similar to a true walk.  #@NEW_LINE#@#  When shaking their phones, subjects also used different strategies, such as moving the phone linearly back and forth, drawing circles, imitating the hand movements of a true walk, and rotating the phone.  #@NEW_LINE#@#  For the fake sitting trials where they were walking, most subjects tried to walk very smoothly, but some also tried to walk with a pace different from their normal walking trial.  #@NEW_LINE#@#  Others tried to move the phone with their hand in such a way that the overall impact on the phone was reduced.  #@NEW_LINE#@#  
The cheating strategies used by subjects are reflected in a low-dimensional representation of their motion features depicted in Fig 3.  #@NEW_LINE#@#  In each plot, the green circles correspond to the baseline (non-deceptive) sensor data for either sitting (top plots) or walking (bottom plots), and the grey crosses are deceptive behavior data.  #@NEW_LINE#@#  It is evident from this figure that the subjects strategy in cheating, which is manifested in the location of grey dots, changes from trial to trial.  #@NEW_LINE#@#  Therefore, our experiment successfully motivated subjects to try various strategies to trick the activity classifier.  #@NEW_LINE#@#  

Machine_s_Success_in_Detecting_True_Activities  #@NEW_LINE#@#  
We evaluated the performance of baseline and expert classifiers in detecting the true activities, by varying the number of training subjects from 1 to 13 and testing them on subjects not present in training sets.  #@NEW_LINE#@#  The single-subject classifiers were the ones that were trained during the experiment and used in the mobile application, while the rest of the classifiers were trained after data from all subjects was collected.  #@NEW_LINE#@#  Fig 4 shows how expert classifiers outperformed baseline classifiers in detecting fake activity for any number of training subjects.  #@NEW_LINE#@#  Nevertheless, the accuracy of both classifiers increased by increasing the number of training subjects.  #@NEW_LINE#@#  
In the leave-one-subject-in (LOSI) case (far left), where the classifiers were trained on one subject and tested on the rest, the baseline classifier had an accuracy of ~38% while the expert classifiers accuracy was ~59%.  #@NEW_LINE#@#  For the leave-one-subject-out (LOSO) case (far right), where the classifier was trained on all subjects except one and tested on the remaining subject, these numbers were ~47% and ~84%, respectively.  #@NEW_LINE#@#  Thus, the accuracy of the baseline classifier did not get better than chance (50%) by increasing the number of training subjects, while the expert classifier had good accuracy in the LOSO cross-validation setting.  #@NEW_LINE#@#  
We also evaluated how the classifiers performed on normal activity data, before and after training on deceptive activity.  #@NEW_LINE#@#  These are shown by dashed lines in Fig 4.  #@NEW_LINE#@#  We found that the accuracy of both baseline and expert classifiers increased by including more training subjects, nevertheless their performances did not considerably differ.  #@NEW_LINE#@#  Therefore, training the classifiers on deceptive activity data did not affect their performance on normal activity data.  #@NEW_LINE#@#  
Next, we wanted to see if the performance of the classifiers was different for walking and sitting activities.  #@NEW_LINE#@#  Table 2 shows the precision and the recall of the expert classifier in detecting each of the activity classes, in the LOSI and LOSO settings.  #@NEW_LINE#@#  Interestingly, there is a considerable difference in recall between the two classes, implying that most of the inaccuracy of the LOSI classifier was caused by inaccuracy in detecting the walking activity.  #@NEW_LINE#@#  In other words, the LOSI model was more vulnerable to deceptive walking.  #@NEW_LINE#@#  This difference disappeared when more training subjects were used, in the LOSO classifier.  #@NEW_LINE#@#  Thus, in the end, the expert classifier with sufficient number of training subjects was able to perform well in both walking and sitting classes.  #@NEW_LINE#@#  
Finally, we evaluated how the gap between baseline and expert classifiers varied depending on which subject was used for test.  #@NEW_LINE#@#  Fig 5 shows the difference between the accuracy of the baseline and the expert classifiers as a function of the number of training subjects.  #@NEW_LINE#@#  Each gray line shows this difference when one subject is used as test, and the black line shows the average for all test subjects.  #@NEW_LINE#@#  It seems that the average difference is maximized when the number of training subjects is 2, although the overall variation is negligible.  #@NEW_LINE#@#  However, this difference considerably varies across the test subjects.  #@NEW_LINE#@#  Therefore, the gap between the baseline and the expert classifiers performance depends on which subject is used for test, but it does not depend on the number of training subjects.  #@NEW_LINE#@#  


Discussion  #@NEW_LINE#@#  
Activity tracking systems are vulnerable to deceptive behavior.  #@NEW_LINE#@#  We showed that training activity classifiers on deceptive activity data from a few subjects enabled these classifiers to detect the deceptive activity of other subjects with good accuracy.  #@NEW_LINE#@#  The performance of the classifiers trained using both normal and deceptive activity data was considerably and consistently better than the ones trained only using normal activity data.  #@NEW_LINE#@#  Therefore, it seems that machine learning of deceptive behavior can be generalized across individuals.  #@NEW_LINE#@#  An implication of this result is that including deceptive activity data in the training of current activity tracking systems might substantially increase their performance in handling deceptive behavior.  #@NEW_LINE#@#  
Tricking an activity classifier which is only trained on normal activity data is simple.  #@NEW_LINE#@#  This was evident in our experiments, where most subjects were able to cheat in the first trial with a success rate of close to 100%.  #@NEW_LINE#@#  However, the deceptive activity data collected in this way will not have enough variability within and across the subjects.  #@NEW_LINE#@#  Our experiment was able to generate more variability by retraining the classifier on the deceptive data collected from each trial, and asking the subjects to try to cheat again.  #@NEW_LINE#@#  This made subjects use a new cheating strategy for each trial, resulting in a rich deceptive activity dataset.  #@NEW_LINE#@#  
Nevertheless, this study has a number of limitations that must be considered.  #@NEW_LINE#@#  First, we did not explore many other ways of cheating in activity recognition.  #@NEW_LINE#@#  For example, we did not account for impersonation, which means handing the mobile phone to another person to do activities.  #@NEW_LINE#@#  This type of cheating was explored in a recent study [17].  #@NEW_LINE#@#  Furthermore, there can be other ways for individuals to cheat that were not possible in our experiment setting.  #@NEW_LINE#@#  For instance, one might put their phone in a clothes dryer or stick it to their pet in order to make it detect walking.  #@NEW_LINE#@#  In fact, we were assuming that subjects were carrying their phone all the time.  #@NEW_LINE#@#  
Second, we only tried to distinguish between walking and sitting.  #@NEW_LINE#@#  There are several other classes of physical activity, such as stair climbing, running, or driving a car, that can be detected by some smartphone-based activity tracking services such as Googles Activity Recognition API on Android devices.  #@NEW_LINE#@#  When more activity classes are present, it is possible that the cheating behavior causes the confusion to spread across many classes (e.g., confusing walking with driving or sitting with stair-climbing), which makes it more difficult to handle the deceptive behavior.  #@NEW_LINE#@#  Our goal here was to keep the number of classes low and instead focus on maximizing the diversity of cheating strategies that subjects were using.  #@NEW_LINE#@#  
Finally, smartphones are less portable than wearable activity trackers which might be better candidates in situations such as intensive sports activities.  #@NEW_LINE#@#  However, our subjects were carrying the phone all the time, and we limited the phone sensors to accelerometer and gyroscope.  #@NEW_LINE#@#  This setting minimized the difference between phone-based and wearable-based activity tracking in our experiment, and thus we believe that our methodology can be applied to the wearable sensor technology as well.  #@NEW_LINE#@#  In fact, a future study can perform the same experiment with wearable activity trackers.  #@NEW_LINE#@#  
Physical activity tracking is becoming more and more popular in healthcare, as well as other areas.  #@NEW_LINE#@#  A law firm in Canada has used the activity data collected from their clients activity tracker device to show the adverse effects of an accident she had in the past [22].  #@NEW_LINE#@#  Although this is the first known case of this kind, it is very likely that courts in future incorporate activity data into their evidence gathering procedures.  #@NEW_LINE#@#  We showed the potential to considerably improve the robustness of current physical activity tracking systems, and making them more reliable by training them on deceptive along with normal activity data.  #@NEW_LINE#@#  
Our methodology can be extended to other areas of pattern recognition and ubiquitous computing that are susceptible to deceptive behavior.  #@NEW_LINE#@#  For example, speaker verification technology on smartphones allows us to detect whether a voice command is issued by the owner of the phone or another person.  #@NEW_LINE#@#  However, the other person may be able to hack the software by imitating the owners voice.  #@NEW_LINE#@#  One way to make speaker verification more robust against such behavior would be to ask individuals to try to trick it into detecting someone elses voice, and train the classifier on the data collected in this way.  #@NEW_LINE#@#  Thus, an experimental setup similar to ours can be used to increase the robustness of speaker verification against deceptive behavior.  #@NEW_LINE#@#  



