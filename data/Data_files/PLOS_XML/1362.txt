article id="http://dx.doi.org/10.1371/journal.pcbi.1005517"  #@NEW_LINE#@#  
title  #@NEW_LINE#@#  
Automatically tracking neurons in a moving and deforming brain  #@NEW_LINE#@#  

Abstract  #@NEW_LINE#@#  
Advances in optical neuroimaging techniques now allow neural activity to be recorded with cellular resolution in awake and behaving animals.  #@NEW_LINE#@#  Brain motion in these recordings pose a unique challenge.  #@NEW_LINE#@#  The location of individual neurons must be tracked in 3D over time to accurately extract single neuron activity traces.  #@NEW_LINE#@#  Recordings from small invertebrates like C. elegans are especially challenging because they undergo very large brain motion and deformation during animal movement.  #@NEW_LINE#@#  Here we present an automated computer vision pipeline to reliably track populations of neurons with single neuron resolution in the brain of a freely moving C. elegans undergoing large motion and deformation.  #@NEW_LINE#@#  3D volumetric fluorescent images of the animals brain are straightened, aligned and registered, and the locations of neurons in the images are found via segmentation.  #@NEW_LINE#@#  Each neuron is then assigned an identity using a new time-independent machine-learning approach we call Neuron Registration Vector Encoding.  #@NEW_LINE#@#  In this approach, non-rigid point-set registration is used to match each segmented neuron in each volume with a set of reference volumes taken from throughout the recording.  #@NEW_LINE#@#  The way each neuron matches with the references defines a feature vector which is clustered to assign an identity to each neuron in each volume.  #@NEW_LINE#@#  Finally, thin-plate spline interpolation is used to correct errors in segmentation and check consistency of assigned identities.  #@NEW_LINE#@#  The Neuron Registration Vector Encoding approach proposed here is uniquely well suited for tracking neurons in brains undergoing large deformations.  #@NEW_LINE#@#  When applied to whole-brain calcium imaging recordings in freely moving C. elegans, this analysis pipeline located 156 neurons for the duration of an 8 minute recording and consistently found more neurons more quickly than manual or semi-automated approaches.  #@NEW_LINE#@#  

Author_summary  #@NEW_LINE#@#  
Computer algorithms for identifying and tracking neurons in images of a brain have struggled to keep pace with rapid advances in neuroimaging.  #@NEW_LINE#@#  In small transparent organism like the nematode C. elegans, it is now possible to record neural activity from all of the neurons in the animals head with single-cell resolution as it crawls.  #@NEW_LINE#@#  A critical challenge is to identify and track each individual neuron as the brain moves and bends.  #@NEW_LINE#@#  Previous methods required large amounts of manual human annotation.  #@NEW_LINE#@#  In this work, we present a fully automated algorithm for neuron segmentation and tracking in freely behaving C. elegans.  #@NEW_LINE#@#  Our approach uses non-rigid point-set registration to construct feature vectors describing the location of each neuron relative to other neurons and other volumes in the recording.  #@NEW_LINE#@#  Then we cluster feature vectors in a time-independent fashion to track neurons through time.  #@NEW_LINE#@#  This new approach works very well when compared to a human.  #@NEW_LINE#@#  

Citation: Nguyen JP, Linder AN, Plummer GS, Shaevitz JW, Leifer AM (2017) Automatically tracking neurons in a moving and deforming brain.  #@NEW_LINE#@#  PLoS Comput Biol 13(5):  #@NEW_LINE#@#  
           e1005517.  #@NEW_LINE#@#  

        https://doi.org/10.1371/journal.pcbi.1005517  #@NEW_LINE#@#  
Editor: Eva Dyer,  #@NEW_LINE#@#  
Northwestern University, UNITED STATES  #@NEW_LINE#@#  

Received: October 14, 2016; Accepted: April 11, 2017; Published:  May 18, 2017  #@NEW_LINE#@#  
Copyright:  Â© 2017 Nguyen et al.  #@NEW_LINE#@#  This is an open access article distributed under the terms of the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.  #@NEW_LINE#@#  
Data Availability: All data used in this publication have been made publicly available at the IEEE DataPort repository (DOI:10.21227/H2901H) http://dx.doi.org/10.21227/H2901H.  #@NEW_LINE#@#  Worm strains used in this work have been made publicly available through the Caenorhabditis Genetics Center (http://www.cgc.cbs.umn.edu/).  #@NEW_LINE#@#  
Funding: This work was supported by Simons Foundation Grant SCGB 324285 to AML (https://www.simonsfoundation.org/life-sciences/simons-collaboration-global-brain/) and Princeton Universitys Inaugural Dean for Research Innovation Fund for New Ideas in the Natural Sciences to JWS and AML (http://www.princeton.edu/main/news/archive/S39/38/59M52/index.xml?section=topstories).  #@NEW_LINE#@#  JPN is supported by grants from the Swartz Foundation (http://www.theswartzfoundation.org/princeton.asp) and the Glenn Foundation for Medical Research (http://glennfoundation.org/glenn-centers/princeton/).  #@NEW_LINE#@#  ANL is supported by a National Institutes of Health institutional training grant NIH T32 MH065214 through the Princeton Neuroscience Institute.  #@NEW_LINE#@#  The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.  #@NEW_LINE#@#  
Competing interests:  The authors have declared that no competing interests exist.  #@NEW_LINE#@#  
Introduction  #@NEW_LINE#@#  
Optical neural imaging has ushered in a new frontier in neuroscience that seeks to understand how neural activity generates animal behavior by recording from large populations of neurons at cellular resolution in awake and behaving animals.  #@NEW_LINE#@#  Population recordings have now been used to elucidate mechanisms behind zebra finch song production [1], spatial encoding in mice [2], and limb movement in primates [3].  #@NEW_LINE#@#  When applied to small transparent organisms, like Caenorhabditis elegans [4], Drosophila [5], and zebrafish [6], nearly every neuron in the brain can be recorded, permitting the study of whole brain neural dynamics at cellular resolution.  #@NEW_LINE#@#  
Methods for segmenting and tracking neurons have struggled to keep up as new imaging technologies now record from more neurons over longer times in environments with greater motion.  #@NEW_LINE#@#  Accounting for brain motion in particular has become a major challenge, especially in recordings of unrestrained animals.  #@NEW_LINE#@#  Brains in motion undergo translations and deformations in 3D that make robust tracking of individual neurons very difficult.  #@NEW_LINE#@#  The problem is compounded in invertebrates like C. elegans where the head of the animal is flexible and deforms greatly.  #@NEW_LINE#@#  If left unaccounted for, brain motion not only prevents tracking of neurons, but it can also introduce artifacts that mask the true neural signal.  #@NEW_LINE#@#  In this work we propose an automated approach to segment and track neurons in the presence of dramatic brain motion and deformation.  #@NEW_LINE#@#  Our approach is optimized for calcium imaging in unrestrained C. elegans.  #@NEW_LINE#@#  
Neural activity can be imaged optically with the use of genetically encoded calcium sensitive fluorescent indicators, such as GCaMP6s used in this work [7].  #@NEW_LINE#@#  Historically calcium imaging was often conducted in head-fixed or anesthetized animals to avoid challenges involved with imaging moving samples [4, 8, 9].  #@NEW_LINE#@#  Recently, however, whole-brain imaging was demonstrated in freely behaving C. elegans [10, 11].  #@NEW_LINE#@#  C. elegans are a small transparent nematode, approximately 1mm in length, with a compact nervous system of only 302 neurons.  #@NEW_LINE#@#  About half of the neurons are located in the animals head, which we refer to as its brain.  #@NEW_LINE#@#  
Analyzing fluorescent images of moving and deforming brains requires algorithms to detect neurons across time and extract fluorescent signals in 3D.  #@NEW_LINE#@#  Automated methods exist for segmenting and tracking fluorescently labeled cells during C. elegans embryogenesis [12], and semi-automated methods are even able to track specific cells during embryo motion [13], but to our knowledge these methods are not suitable for tracking neurons in adults.  #@NEW_LINE#@#  Generally, several strategies exist for tracking neurons in volumetric recordings.  #@NEW_LINE#@#  One approach is to find correspondences between neuron positions in consecutive time points, for example, by applying a distance minimization, and then stitching these correspondences together through time [14].  #@NEW_LINE#@#  This type of time-dependent tracking requires that neuron displacements for each time step are less than the distance between neighboring neurons, and that the neurons remain identifiable at all times.  #@NEW_LINE#@#  If these requirements break down, even for only a few time points, errors can quickly accumulate.  #@NEW_LINE#@#  Other common methods, like independent component analysis (ICA) [15] are also exquisitely sensitive to motion and as a result they have not been successfully applied to recordings with large brain deformations.  #@NEW_LINE#@#  
Large inter-volume motion arises when the recorded image volume acquisition rate is too low compared to animal motion.  #@NEW_LINE#@#  Unfortunately, large inter-volume brain motion is likely to be a prominent feature of whole-brain recordings of moving brains for the foreseeable future.  #@NEW_LINE#@#  In all modern imaging approaches there is a fundamental tradeoff between the following attributes: acquisition rate (temporal resolution), spatial resolution, signal to noise, and the spatial extent of the recording.  #@NEW_LINE#@#  As recordings seek to capture larger brain regions at single cell resolution, they necessarily compromise on temporal resolution.  #@NEW_LINE#@#  For example, whole brain imaging in freely moving C. elegans has only been demonstrated at slow acquisition rates because of the requirements to scan the entire brain volume and expose each slice for sufficiently long time.  #@NEW_LINE#@#  At these rates, a significant amount of motion is present between image planes within a single brain volume.  #@NEW_LINE#@#  Similarly, large brain motions also remain between sequential volumes.  #@NEW_LINE#@#  Neurons can move the entire width of the worms head between sequential volumes when recording at 6 brain-volumes per second, as in [10].  #@NEW_LINE#@#  In addition to motion, the brain also bends and deforms as it moves.  #@NEW_LINE#@#  Such changes to the brains conformation greatly alter the pattern of neuron positions making constellations of neurons difficult to compare across time.  #@NEW_LINE#@#  
To track neurons in the presence of this motion, previous work that measured neural activity in freely moving C. elegans utilized semi-automated methods that required human proof reading or manual annotation to validate each and every neuron-time point [10, 11].  #@NEW_LINE#@#  This level of manual annotation becomes impractical as the length of recordings and the number of neurons increases.  #@NEW_LINE#@#  For example, 10 minutes of recorded neural activity from [10], had over 360,000 neuron time points and required over 200 person-hours of proofreading and manual annotation.  #@NEW_LINE#@#  Here, we introduce a new time-independent algorithm that uses machine learning to automatically segment and track all neurons in the head of a freely moving animal without the need for manual annotation or proofreading.  #@NEW_LINE#@#  We call this technique Neuron Registration Vector Encoding, and we use it to extract neural signals in unrestrained C. elegans expressing the calcium indicator GCaMP6s and the fluorescent label RFP.  #@NEW_LINE#@#  

Results  #@NEW_LINE#@#  
Overview_of_neuron_tracking_analysis  #@NEW_LINE#@#  
We introduce a method to track over 100 neurons in the brain of a freely moving C. elegans.  #@NEW_LINE#@#  The analysis pipeline is made of five modules and an overview is shown in Fig 1.  #@NEW_LINE#@#  The first three modules, Centerline Detection, Straightening and Segmentation, collectively assemble the individually recorded planes into a sequence of 3D volumes and identify each neurons location in each volume.  #@NEW_LINE#@#  The next two modules, Registration Vector Construction and Clustering, form the core of the method and represent a significant advance over previous approaches.  #@NEW_LINE#@#  Collectively, these two modules are called Neuron Registration Vector Encoding.  #@NEW_LINE#@#  The Registration Vector Construction module leverages information from across the entire recording in a time-independent way to generate feature vectors that characterize every neuron at every time point in relation to a repertoire of brain confirmations.  #@NEW_LINE#@#  The Clustering module then clusters these feature vectors to assign a consistent identity to each neuron across the entire recording.  #@NEW_LINE#@#  A final module corrects for errors that can arise from segmentation or assignment.  #@NEW_LINE#@#  The implementation and results of this approach are described below.  #@NEW_LINE#@#  

Recording_of_whole-brain_calcium_activity_and_body_posture_in_moving_animal  #@NEW_LINE#@#  
Worms expressing the calcium indicator GCaMP6s and a calcium-insensitive fluorescent protein RFP in the nuclei of all neurons were imaged during unrestrained behavior in a custom 3D tracking microscope, as described in [10].  #@NEW_LINE#@#  Only signals close to the cell nuclei are measured.  #@NEW_LINE#@#  Two recordings are presented in this work: a new 8 minute recording of an animal of strain AML32 and a previously reported 4 minute recording of strain AML14 first described in [10].  #@NEW_LINE#@#  
The signal of interest in both recordings is the green fluorescence intensity from GCaMP6s in each neuron.  #@NEW_LINE#@#  Red fluorescence from the RFP protein serves as a reference for locating and tracking the neurons.  #@NEW_LINE#@#  The microscope provides four raw image streams that serve as inputs for our neural tracking pipeline, seen in Fig 2A.  #@NEW_LINE#@#  They are: (1) low-magnification dark-field images of the animals body posture (2) low-magnification fluorescent images of the animals brain (3) high-magnification green fluorescent images of single optical slices of the brain showing GCaMP6s activity and (4) high-magnification red fluorescent images of single optical slices of the brain showing the location of RFP.  #@NEW_LINE#@#  The animals brain is kept centered in the field of view by realtime feedback loops that adjust a motorized stage to compensate for the animals crawling.  #@NEW_LINE#@#  To acquire volumetric information, the high magnification imaging plane scans back and forth along the axial dimension, z, at 3 Hz as shown in Fig 2B, acquiring roughly 33 optical slices per volume, sequentially, for 6 brain-volumes per second.  #@NEW_LINE#@#  The animals continuous motion causes each volume to be arbitrarily sheared.  #@NEW_LINE#@#  Although the image streams operate at different volume acquisition rates and on different clocks, they are later synchronized by flashes of light that are simultaneously visible to all cameras.  #@NEW_LINE#@#  Each image in each stream is given a timestamp on a common timeline for analysis.  #@NEW_LINE#@#  Each of the four imaging streams are spatially aligned to each other in software using affine transformations found by imaging fluorescent beads.  #@NEW_LINE#@#  An example of the high magnification RFP recording is shown in S1 Movie.  #@NEW_LINE#@#  

Centerline_detection_and_gross_brain_alignment  #@NEW_LINE#@#  
The animals posture contains information about the brains orientation and about any deformations arising from the animals side-to-side head swings.  #@NEW_LINE#@#  The first step of the pipeline is to extract the centerline that describes the animals posture.  #@NEW_LINE#@#  Centerline detection in C. elegans is an active field of research.  #@NEW_LINE#@#  Most algorithms use intensity thresholds to detect the worms body and then use binary image operations to extract a centerline [1618].  #@NEW_LINE#@#  Here we use an open active contour approach [19, 20] to extract the centerline from dark field images with modifications to account for cases when the worms body crosses over itself as occurs during so-called Omega Turns.  #@NEW_LINE#@#  In principle any method, automated or otherwise, that detects the centerlines should be sufficient.  #@NEW_LINE#@#  At rare times where the worm is coiled and the head position and orientation cannot be determined automatically, the head and the tail of the worm are manually identified.  #@NEW_LINE#@#  
The animals centerline allows us to correct for gross changes in the worms position, orientation, and conformation (Fig 3a).  #@NEW_LINE#@#  We use the centerlines determined by the low magnification behavior images to straighten the high magnification images of the worms brain.  #@NEW_LINE#@#  An affine transform must be applied to the centerline coordinates to transform them from the dark field coordinate system into the coordinate system of the high magnification images.  #@NEW_LINE#@#  Each image slice of the worm brain is straightened independently to account for motion within a single volume.  #@NEW_LINE#@#  The behavior images are taken at a lower acquisition rate than the high magnification brain images, so a linear interpolation is used to obtain a centerline for each slice of the brain volume.  #@NEW_LINE#@#  In each slice, we find the tangent and normal vectors at every point of the centerline (Fig 3b).  #@NEW_LINE#@#  The points are interpolated with a single pixel spacing along the centerline to preserve the resolution of the image.  #@NEW_LINE#@#  The image intensities along each of the normal directions are interpolated and the slices are stacked to produce a straightened image in each slice (Fig 3c).  #@NEW_LINE#@#  In the new coordinate system, the orientation of the animal is fixed and the gross deformations from the worms bending are suppressed.  #@NEW_LINE#@#  More subtle motion and deformation, however, remains.  #@NEW_LINE#@#  
We further reduce shearing between slices using standard video stabilization techniques [21].  #@NEW_LINE#@#  Specifically, bright-intensity peaks in the images are tracked between neighboring image slices.  #@NEW_LINE#@#  The coordinates of these peaks are used to calculate the affine transformations between neighboring slices of the volume using least squares.  #@NEW_LINE#@#  All slices are registered to the middle slice by applying these transformations sequentially throughout the volume.  #@NEW_LINE#@#  Each slice would undergo transformations for every slice in between it and the middle slice to correct shear throughout the volume.  #@NEW_LINE#@#  A final rigid translation is required to align each volume to the first volume of the recording.  #@NEW_LINE#@#  The translations are found by finding an offset that maximizes the cross-correlation between each volume and the initial volume.  #@NEW_LINE#@#  
A video of straightening is shown in S1 Movie.  #@NEW_LINE#@#  Straightened images are used for the remaining steps of the analysis pipeline.  #@NEW_LINE#@#  Only the final measurement of fluorescence intensity is performed in the original unstraightened coordinated system.  #@NEW_LINE#@#  

Segmentation  #@NEW_LINE#@#  
Before neuron identities can be matched across time, we must first segment the individual neurons within a volume to recovers each neurons size, location, and brightness (Fig 3d and 3e).  #@NEW_LINE#@#  Many algorithms have been developed to segment neurons in a dense region [22, 23].  #@NEW_LINE#@#  We segment the neurons by finding volumes of curvature in fluorescence intensity in the straigthened volumes.  #@NEW_LINE#@#  After an initial smoothing, we compute the 3D Hessian matrix at each point in space and threshold for points where all of the three eigenvalues of the Hessian matrix are negative.  #@NEW_LINE#@#  This process selects for regions around intensity peaks in three dimensions.  #@NEW_LINE#@#  In order to further divide regions into objects that are more likely to represent neurons, we use a watershed separation on the distance transform of the thresholded image.  #@NEW_LINE#@#  The distance transform is found by replacing each thresholded pixel with the Euclidean distance between it and the closest zero pixel in the thresholded image.  #@NEW_LINE#@#  This approach is sufficient to segment most neurons.  #@NEW_LINE#@#  Occasionally neurons are missed or two neurons are incorrectly merged together.  #@NEW_LINE#@#  These occasional errors are corrected automatically later in the pipeline.  #@NEW_LINE#@#  

Neuron_registration_vector_construction  #@NEW_LINE#@#  
Extracting neural signals requires the ability to match neurons found at different time points.  #@NEW_LINE#@#  Even after gross alignment and straightening, neurons in our images are still subject to local nonlinear deformations and there is significant movement of neurons between volumes.  #@NEW_LINE#@#  This remaining motion and deformation is clearly visible, for example, in S1 Movie.  #@NEW_LINE#@#  Rather than tracking neurons sequentially in time, the neurons in each volume are characterized based on how they match to neurons in a set of reference volumes.  #@NEW_LINE#@#  Our algorithm compares constellations of neurons in one volume to unannotated reference volumes and assigns correspondences or matches between the neurons in the sample and each reference volume.  #@NEW_LINE#@#  We modified a point-set registration algorithm developed by Jian and Vemuri [24] to do this (Fig 4a).  #@NEW_LINE#@#  The registration algorithm represents two point-sets, a sample point-set denoted by X = {xi} and a reference point-set indicated by R = {ri}, as Gaussian mixtures and then attempts to register them by deforming space to minimize the distance between the two mixtures.  #@NEW_LINE#@#  In their implementation, each point is modeled by a 3D Gaussian with uniform covariance.  #@NEW_LINE#@#  Since we are matching images of neurons rather than just points, we can use the additional information from the size and brightness of each neuron.  #@NEW_LINE#@#  We add this information to the representation of each neuron by adjusting the amplitude and standard deviation of the Gaussians.  #@NEW_LINE#@#  The Gaussian mixture representation of an image is given by,  #@NEW_LINE#@#  
(1)  #@NEW_LINE#@#  
where Ai, xi, and i are the amplitude, mean, and standard deviation of the i-th Gaussian.  #@NEW_LINE#@#  These parameters are derived from the brightness, centroid, and size of the segmented neuron, while  is the 3D spatial coordinate.  #@NEW_LINE#@#  A scale factor  is added to the standard deviation to scale the size of each Gaussian.  #@NEW_LINE#@#  This will be used later during gradient descent.  #@NEW_LINE#@#  The sample constellation of neurons is then represented by the Gaussian mixture f(, X).  #@NEW_LINE#@#  Similarly, the reference constellations own neurons are represented as a f(, R).  #@NEW_LINE#@#  
To match a sample constellation of neurons X with a reference constellation of neurons R, we use the non rigid transformation .  #@NEW_LINE#@#  The transformation maps X to u[X] such that the L2 distance between f(, u[X]) and f(, R) is minimized with some constraint on the amount of deformation.  #@NEW_LINE#@#  This can be written as an energy minimization problem, with the energy of the transformation, E(u), written as  #@NEW_LINE#@#  
(2)  #@NEW_LINE#@#  
Note that the point-sets X and R are allowed to have different numbers of points.  #@NEW_LINE#@#  We model the deformations as a thin-plate spline (TPS).  #@NEW_LINE#@#  The TPS transformation equations and resulting form of EDeformation(u) are shown in the methods.  #@NEW_LINE#@#  The minimization of E is found by gradient descent.  #@NEW_LINE#@#  Working with Gaussian mixtures as opposed to the original images allows us to model the deformations and analytically compute the gradients of Eq 2 making gradient descent more efficient.  #@NEW_LINE#@#  The gradient descent approach used here is similar to that outlined by Jian and Vemuri [25].  #@NEW_LINE#@#  Since the energy landscape has many local minima, we initially chose a large scale factor, , to increase the size of each Gaussian and smooth over smaller features.  #@NEW_LINE#@#  Gradient descent is iterated multiple times with  decreasing multiple times.  #@NEW_LINE#@#  After the transformation, sample points are matched to reference points by minimizing distances between assigned pairs using an algorithm from [14].  #@NEW_LINE#@#  The matching is not greedy, and neurons in the sample that are far from any neurons in the reference are not matched.  #@NEW_LINE#@#  A neuron at xi is assigned a match vi to indicate which neuron in the set R it was matched to.  #@NEW_LINE#@#  For example if xi matched with rj when X is registered to R, then vi = j.  #@NEW_LINE#@#  If xi has no match in R, then vi = .  #@NEW_LINE#@#  
The modified non-rigid point-set registration algorithm described above allows us to compare one constellation of neurons to another.  #@NEW_LINE#@#  In principle, neuron tracking could be achieved by registering the constellation of neurons at each time-volume to a single common reference.  #@NEW_LINE#@#  That approach is susceptible to failures in non-rigid point-set registration.  #@NEW_LINE#@#  Non-rigid point-set registration works well when the conformation of the animal in the sample and the reference are similar, but it is unreliable when there are large deformations between the sample and the reference, as happens with some regularity in our recordings.  #@NEW_LINE#@#  In addition, this approach is especially sensitive to any errors in segmentation, especially in the reference.  #@NEW_LINE#@#  An alternative approach would be to sequentially register neurons in each time volume to the next time-volume.  #@NEW_LINE#@#  This approach, however, accumulates even small errors and quickly becomes unreliable.  #@NEW_LINE#@#  Instead of either of those approaches, we use registration to compare the constellation of neurons at each time volume to a set of reference time-volumes that span a representative space of brain conformations (Fig 4b), as described below.  #@NEW_LINE#@#  
The constellation of neurons at a particular time in our recording is given by Xt, and the position of the i-th neuron at time t is denoted by xi,t.  #@NEW_LINE#@#  We select a set of K reference constellations, each from a different time volume Xt in our recording, so as to achieve a representative sampling of the many different possible brain conformations the animal can attain.  #@NEW_LINE#@#  These K reference volumes are denoted by {R1, R2, R3,,RK}.  #@NEW_LINE#@#  We use 300 volumes spaced evenly through time as our reference constellations.  #@NEW_LINE#@#  Each Xt is separately matched with each of the references, and each neuron in the sample, xi,t, gets a set of matches , one match for each of the K references.  #@NEW_LINE#@#  This set of matches is a feature vector which we call a Neuron Registration Vector.  #@NEW_LINE#@#  It describes the neurons location in relation to its neighbors when compared with the set of references.  #@NEW_LINE#@#  This vector can be used to identify neurons across different times.  #@NEW_LINE#@#  
We find that 300 reference volumes creates feature vectors that are sufficiently robust to identify neurons in our recordings.  #@NEW_LINE#@#  What determines the optimal number of reference volumes?  #@NEW_LINE#@#  As long as the reference volumes contain a representative sample of the space of brain conformation occupied during our recordings, the number of reference volumes needed to create a robust feature vector depends only on the size of this conformation space.  #@NEW_LINE#@#  Because the conformation space of a real brain in physiological conditions is finite, there exists some number of reference volumes beyond which adding more reference volumes provides no additional information.  #@NEW_LINE#@#  Crucially, the worm brain seems to explore this finite conformation space quickly relative to the time scales of our recordings.  #@NEW_LINE#@#  As a result, the number of required reference volumes should not depend on recording length, at least for the minutes-long timescales that we consider here.  #@NEW_LINE#@#  

Clustering_registration_vectors  #@NEW_LINE#@#  
The neuron registration vector provides information about that neurons position relative to its neighbors, and how that relative position compares with many other reference volumes.  #@NEW_LINE#@#  A neuron with a particular identity will match similarly to the set of reference volumes and thus that neuron will have similar neuron registration vectors over time.  #@NEW_LINE#@#  Clustering similar registration vectors allows for the identification of that particular neuron across time (Fig 4c and 4d).  #@NEW_LINE#@#  
To illustrate the motivation for clustering, consider a neuron with identity s that is found at different times in two sample constellations X1 and X2.  #@NEW_LINE#@#  When X1 and X2 have similar deformations, the neuron s from both constellations will be assigned the same set of matches when registered to the set of reference constellations, and as a result the corresponding neuron registration vectors v1 and v2 will be identical.  #@NEW_LINE#@#  This is true even if the registration algorithm itself fails to correctly match neuron s in the sample to its true neuron s in the reference.  #@NEW_LINE#@#  As the deformations separating X1 and X2 become larger, the distance between the feature vectors v1 and v2 also becomes larger.  #@NEW_LINE#@#  This is because the two samples will be matched to different neurons in some of the reference volumes as each sample is more likely to register poorly with references that are far from it in the space of deformations.  #@NEW_LINE#@#  
Crucially, the reference volumes consist of instances of the animal in many different deformation states.  #@NEW_LINE#@#  So while errors in registering some samples will exist for certain references, they do not persist across all references, and thus do not effect the entire feature vector.  #@NEW_LINE#@#  For the biologically relevant deformations that we observe, the distance between v1 and v2 will be smaller if both are derived from neuron s than compared to the distance between v1 and v2 if they were derived from s and another neuron.  #@NEW_LINE#@#  We can therefore cluster the feature vectors to produce groups that consist of the same neuron found at many different time points.  #@NEW_LINE#@#  
The goal of clustering is to assign each neuron at each volume to a cluster representing that neurons identity.  #@NEW_LINE#@#  Clustering is performed on the list of neuron registration vectors from all neurons at all times, {vi,t}.  #@NEW_LINE#@#  Each match in the vector, , is represented as a binary vector of 0s with a 1 at the  position.  #@NEW_LINE#@#  The size of the vector is equal to the number of neurons in Rk.  #@NEW_LINE#@#  The feature vector {vi,t} is the concatenation of all of the binary vectors from all matches to the K reference constellations.  #@NEW_LINE#@#  
For computational efficiency, a two-step process was used to perform the clustering: First agglomerative hierarchical clustering was used on the neurons from an initial subset of volumes to define the clusters.  #@NEW_LINE#@#  Next, neurons from all volumes at all times were assigned to the nearest cluster as defined by correlation distance to the clusters center of mass.  #@NEW_LINE#@#  Assignments were made in such a way so as to ensure that a given cluster is assigned to at most one neuron per volume.  #@NEW_LINE#@#  Details of this clustering approach are described in the methods.  #@NEW_LINE#@#  Each cluster is given a label {S1, S2, S3,} which uniquely identifies a single neuron over time, and each neuron at each time xi, t is given an identifier si, t corresponding to the cluster to which that neuron-time belongs.  #@NEW_LINE#@#  Neurons that are not classified into one of these clusters are removed because they are likely artifactual or represent a neuron that is segmented too poorly for inclusion.  #@NEW_LINE#@#  

Correcting_errors_in_tracking_and_segmentation  #@NEW_LINE#@#  
Neuron Registration Vector Encoding successfully identifies segmented neurons consistently across time.  #@NEW_LINE#@#  A transient segmentation error, however, would necessarily lead to missing or misidentified neurons.  #@NEW_LINE#@#  To identify and correct for missing and misidentified neurons, we check each neurons locations and fill in missing neurons using a consensus comparison and interpolation in a TPS deformed space.  #@NEW_LINE#@#  For each neuron identifier s and time t, we use all other point-sets, {Xt} to guess what that neurons location might be.  #@NEW_LINE#@#  This is done by finding the TPS transformation, utt: Xt  Xt, that maps the identified points from Xt to the corresponding points in Xt excluding the point s. Since the correspondences between neurons has already been determined, utt can be found by solving for the parameters from the TPS equation (see methods).  #@NEW_LINE#@#  The position estimate is then given by utt [xi,t] with i selected such that si,t = s. This results in a set of points representing the set of predicted locations of the neuron at time t as inferred from the other volumes.  #@NEW_LINE#@#  When a neuron identifier is missing for a given time, the position of that neuron s is inferred by consensus.  #@NEW_LINE#@#  Namely, correct location is deemed to be the centroid of the set of inferred locations weighted by the underlying image intensity.  #@NEW_LINE#@#  This weighted centroid is also used if the current identified location of the neuron s has a distance greater than 3 standard deviations away from the centroid of the set of locations inferred from the other volumes, implying that an error may have occurred in that neurons classification.  #@NEW_LINE#@#  This is shown in Fig 5, where neuron 111 is correctly identified in volume 735, but the the label for neuron 111 is incorrectly located in volume 736.  #@NEW_LINE#@#  In that case the weighted centroid from consensus voting was used.  #@NEW_LINE#@#  

Comparison_with_manually_annotated_data  #@NEW_LINE#@#  
To assess the accuracy of the Neuron Registration Vector Encoding pipeline, we applied our automated tracking system to a 4 minute recording of whole brain activity in a moving C. elegans that had previously been hand annotated and published [10].  #@NEW_LINE#@#  A custom Matlab GUI was used for manually identifying and tracking neurons.  #@NEW_LINE#@#  Nine researchers collectively annotated 70 neurons from each of the 1519 volumes in the 4 minute video.  #@NEW_LINE#@#  This is much less than the 181 neurons predicted to be found in the head [26].  #@NEW_LINE#@#  The discrepancy is likely caused by a combination of imaging conditions and human nature.  #@NEW_LINE#@#  The short exposure time of our recordings makes it hard to resolve dim neurons, and the relatively long recordings tend to cause photobleaching which make the neurons even dimmer.  #@NEW_LINE#@#  Additionally, human researchers naturally tend to select only those neurons that are brightest and are most unambiguous for annotation, and tend to skip dim neurons or those neurons that are most densely clustered.  #@NEW_LINE#@#  
We compared human annotations to our automated analysis in this same dataset.  #@NEW_LINE#@#  We performed the entire pipeline including detecting centerlines, worm straightening, segmentation, and neuron registration vector encoding and clustering, and correction.  #@NEW_LINE#@#  Automated tracking detected 119 neurons from the video compared to 70 from the human.  #@NEW_LINE#@#  In each volume, we paired the automatically tracked neurons with those found by manual detection by finding the closest matches in the unstraightened coordinate system.  #@NEW_LINE#@#  A neuron was perfectly tracked if it matched with the same manual neuron at all times.  #@NEW_LINE#@#  Tracking errors were flagged when a neuron matched with a manual neuron that was different than the one it matched with most often.  #@NEW_LINE#@#  The locations of the detected neurons are shown in Fig 6A.  #@NEW_LINE#@#  Only one neuron was incorrectly identified for more than 5% of the time volumes (Fig 6B).  #@NEW_LINE#@#  The locations of neurons and the corresponding error rates are shown in Fig 6B.  #@NEW_LINE#@#  Neurons that were detected by the algorithm but not annotated manually are shown in gray.  #@NEW_LINE#@#  Upon further inspection, it was noted that some of the mismatches between our method and the manual annotation were due to human errors in the manual annotation, meaning the algorithm is able to correct humans on some occasions.  #@NEW_LINE#@#  
GCaMP6s fluorescent intensity is ultimately the measurement of interest and this can be easily extracted from the tracks of the neuron locations across time.  #@NEW_LINE#@#  The pixels within an approximate 2 m radius sphere around each point are used to calculate the average fluorescent intensity of a neuron in both the red RFP and green GCaMP6s channels at each time.  #@NEW_LINE#@#  This encompasses regions of the cell body, but excludes the neurons processes.  #@NEW_LINE#@#  The pixels within this sphere of interest are identified in the straightened RFP volume, but the intensity values are found by looking-up corresponding pixels in the unstraightened coordinate system in the original red- and green-channel images, respectively.  #@NEW_LINE#@#  We use the calcium-insensitive RFP signal to account for noise sources common to both the GCaMP6s and the RFP channel [10].  #@NEW_LINE#@#  These include, for example, apparent changes in intensity due to focus, motion blur, changes in local fluorophore density arising from brain deformation and apparent changes in intensity due to inhomogeneities in substrate material.  #@NEW_LINE#@#  We measure neural activity as a fold change over baseline of the ratio of GCaMP6s to RFP intensity,  #@NEW_LINE#@#  
(3)  #@NEW_LINE#@#  
The baseline for each neuron, R0, is defined as the 20th percentile value of the ratio R for that neuron.  #@NEW_LINE#@#  Fig 7 shows calcium imaging traces extracted from new whole-brain recordings using the registration vector pipeline.  #@NEW_LINE#@#  156 neurons were tracked for approximately 8 minutes as the worm moves.  #@NEW_LINE#@#  Many neurons show clear correlation with reversal behaviors in the worm.  #@NEW_LINE#@#  


Discussion  #@NEW_LINE#@#  
The Neuron Registration Vector Encoding method presented here is able to process longer recordings and locate more neurons with less human input compared to previous examples of whole-brain imaging in freely moving C. elegans [10].  #@NEW_LINE#@#  Fully automated image processing means that we are no longer limited by the human labor required for manual annotation.  #@NEW_LINE#@#  In new recordings presented here, we are able to observe 156 of the expected 181 neurons, much larger than the approximately 80 observed in previous work from our lab and others [10, 11].  #@NEW_LINE#@#  By automating tracking and segmentation, this relieves one of the major bottlenecks to analyzing longer recordings.  #@NEW_LINE#@#  
The neuron registration vector encoding algorithm primarily relies on the local coherence of the motion of the neurons.  #@NEW_LINE#@#  It permits large deformations of the worms centerline so long as deformations around the centerline remain modest.  #@NEW_LINE#@#  Crucially, the algorithms time-independent approach allows it to tolerate large motion between consecutive time-volumes.  #@NEW_LINE#@#  These properties make it well suited for our neural recordings of C. elegans and we suspect that our approach would be applicable to tracking neurons in moving and deforming brains from other organisms as well.  #@NEW_LINE#@#  
Certain classes of recordings, however, would not be well suited for Neuron Registration Vector Encoding and Clustering.  #@NEW_LINE#@#  The approach will fail when the local coherence of neuron motion breaks down.  #@NEW_LINE#@#  For example, if one neuron were to completely swap locations with another neuron relative to its surroundings, registration would not detect the switch and our method would fail.  #@NEW_LINE#@#  In this case a time-dependent tracking approach may perform better.  #@NEW_LINE#@#  
In addition, proper clustering of the feature vectors requires the animals brain to explore a contiguous region of deformation space.  #@NEW_LINE#@#  For example, if a hypothetical brain were only ever to occupy two distinct conformations that are different enough that registration is not reliable between these two conformation states, the algorithm would fail to cluster feature vectors from the same neuron across the two states.  #@NEW_LINE#@#  To effectively identify the neurons in these two conformations, the animals brain must sample many conformations in between those two states.  #@NEW_LINE#@#  This way, discrepancies in registration arise gradually and the resulting feature vectors occupy a continuous region in the space of possible feature vectors.  #@NEW_LINE#@#  Note that a similar requirement would necessarily apply to any time-dependent tracking algorithm as well.  #@NEW_LINE#@#  
We suspect that brain recordings from most species of interest meet these two requirements: namely neuron motion will have local coherence and the brain will explore a contiguous region of deformation space.  #@NEW_LINE#@#  Where these conditions are satisfied, we expect registration vector encoding to work well.  #@NEW_LINE#@#  Tracking in C. elegans is especially challenging because the entire brain undergoes large deformations as the animal bends.  #@NEW_LINE#@#  In most other organisms like zebrafish and Drosophila, brains are contained within a skull or exoskeleton and relative motion of the neurons is small.  #@NEW_LINE#@#  In those organisms, fluctuations in neuron positions take the form of rigid global transformations as the animal moves, or local non-linear deformations due to motion of blood vessels.  #@NEW_LINE#@#  We expect that this approach will be applicable there as well.  #@NEW_LINE#@#  

Methods  #@NEW_LINE#@#  
Strains  #@NEW_LINE#@#  
Transgenic worms were cultivated on nematode growth medium (NGM) plates with OP50 bacteria.  #@NEW_LINE#@#  Strain AML32 (wtfIs5[Prab-3::NLS::GCaMP6s; Prab-3::NLS::tagRFP]) was generated by UV irradiating animals of strain AML14 (wtfEx4[Prab-3::NLS::GCaMP6s; Prab-3::NLS::tagRFP]) [10] and outcrossing twice.  #@NEW_LINE#@#  

Imaging_C_elegans  #@NEW_LINE#@#  
Imaging is performed as described in Nguyen et al [10].  #@NEW_LINE#@#  The worm is placed between an agarose slab and a large glass coverslip.  #@NEW_LINE#@#  The coverslip is held up by 0.006 plastic shims in order to reduce the amount of pressure on the worm from the glass, and mineral oil is spread over the worm to better match refractive indices in the space between the coverglass and the worm.  #@NEW_LINE#@#  The dark field image is used to extract the animals centerline while the fluorescent image is used for tracking the worms brain.  #@NEW_LINE#@#  Only the head of the worm is illuminated by the fluorescent excitation light and can be observed in the low magnification fluorescent image.  #@NEW_LINE#@#  
The two low magnification videos and the RFP and GCaMP6 high magnification videos are aligned by imaging a slide of 4 m Tetraspeck beads (ThermoFisher) that emit light in both red and green channels.  #@NEW_LINE#@#  We manually or automatically locate the beads from calibration images and use the bead positions to find affine transformations between each cameras coordinate system.  #@NEW_LINE#@#  The affine parameters are found using a least squares fit on the coordinates of the beads in the image.  #@NEW_LINE#@#  

Thin_plate_spline_transformations  #@NEW_LINE#@#  
Thin plate spline (TPS) transformations play an important role in error correcting and are also critical for the point set registration algorithm [24].  #@NEW_LINE#@#  Given a set of n initial control points X = {xi}, and the set of transformed points, u[X], the TPS transformation u can be written as u[X] = WU(X) + AX + t. The affine portion of the transformation is AX + t, while WU(X) is the non-linear part of the transformation from TPS.  #@NEW_LINE#@#  U(X) is an n Ã n vector with  and W is a 3 Ã n matrix.  #@NEW_LINE#@#  The elements of W, A and t are the parameters of the transformation u.  #@NEW_LINE#@#  These parameters are found in different ways dependant on context.  #@NEW_LINE#@#  During the error correction processing step, these parameters are fit by knowing both the the set of control points X and the location of the transformed points u[X].  #@NEW_LINE#@#  In the context of the point set registration algorithm, u[X] incurs an energy penalty for deforming space given by EDeformation(u) = trace(WUWT) [24].  #@NEW_LINE#@#  This cost is used in Eq 2 to determine the total energy of the transformation.  #@NEW_LINE#@#  Gradient descent is then used to determine the optimal TPS transformation parameters by minimizing the total energy of the transformation.  #@NEW_LINE#@#  

Clustering  #@NEW_LINE#@#  
Clustering is performed in two steps: hierarchical clustering and neuron classification.  #@NEW_LINE#@#  We chose to perform hierarchical clustering only on an initial subset of 800 volumes because hierarchical clustering can become prohibitively computationally intensive for larger datasets.  #@NEW_LINE#@#  The correlation distance, 1  corr(vm, vn), was used as the pairwise distance metric for clustering.  #@NEW_LINE#@#  Agglomerative hierarchical clustering was implemented using complete linkage with a distance cutoff of 0.9.  #@NEW_LINE#@#  Clusters which are smaller than 40% of the number of subset volumes were removed.  #@NEW_LINE#@#  After the clusters were defined via hierarchical clustering, we then performed neuron classification.  #@NEW_LINE#@#  
To classify neurons, we assigned neurons from every volume to the cluster with the nearest centroid.  #@NEW_LINE#@#  Only the best matched neuron in each volume is assigned to a cluster and only if the neuron is closer than some threshold distance, described below.  #@NEW_LINE#@#  If two or more neurons from a volume would otherwise be assigned to a single cluster, the closest neuron retains that classification and other neurons are unassigned.  #@NEW_LINE#@#  As a result, some putative neurons are not assigned to any cluster and at most one neuron per volume is assigned to any given cluster.  #@NEW_LINE#@#  The implementation of the algorithm is shown in Algorithm 1.  #@NEW_LINE#@#  
Algorithm 1 Clustering the Neuron Registration Vectors  #@NEW_LINE#@#  
Â 1: input: Set of registration vectors V = {vi,t}  #@NEW_LINE#@#  
Â 2: output: Cluster assignments for each of the vectors in V  #@NEW_LINE#@#  
Â 3: procedure Cluster(V)  #@NEW_LINE#@#  
Â 4: S = subset of V  #@NEW_LINE#@#  
Â 5: subset_assignments = hierarchically cluster S with distance cutoff 0.9  #@NEW_LINE#@#  
Â 6: cluster_list = unique(subset_assignments)  #@NEW_LINE#@#  
Â 7: for each cluster in cluster_list do  #@NEW_LINE#@#  
Â 8: If size(cluster)  greater than  40% of volumes used then  #@NEW_LINE#@#  
Â 9: cluster_center = average of S assigned to cluster  #@NEW_LINE#@#  
10: else  #@NEW_LINE#@#  
11: remove cluster  #@NEW_LINE#@#  
12: end if  #@NEW_LINE#@#  
13: end for  #@NEW_LINE#@#  
14: compute threshold from S  #@NEW_LINE#@#  
15: for each vi,t in V do  #@NEW_LINE#@#  
16: d = distances from vi,t to cluster_centers  #@NEW_LINE#@#  
17: if any(d less_than threshold) then  #@NEW_LINE#@#  
18: assign vi,t to closest cluster  #@NEW_LINE#@#  
19: end if  #@NEW_LINE#@#  
20: end for  #@NEW_LINE#@#  
21: for each volume in the recording do  #@NEW_LINE#@#  
22: for each cluster in cluster_list do  #@NEW_LINE#@#  
23: if multiple vi,t from volume assigned to cluster then  #@NEW_LINE#@#  
24: unassign all vi,t from the cluster except the closest one  #@NEW_LINE#@#  
25: end if  #@NEW_LINE#@#  
26: end for  #@NEW_LINE#@#  
27: end for  #@NEW_LINE#@#  
28: end procedure  #@NEW_LINE#@#  
The threshold distance to determine whether a neuron is assigned to a cluster is calculated using a statistical analysis of the clusters generated by the initial hierarchical clustering so as to discriminate between neurons that are likely correctly or incorrectly assigned.  #@NEW_LINE#@#  The threshold is calculated as follows: For each neuron assigned during the initial clustering, we collect the distance between that neuron and the center of the cluster it was assigned to.  #@NEW_LINE#@#  The distribution of these distances is the correctly assigned distribution.  #@NEW_LINE#@#  In contrast, the null distribution is found by collecting the distances between each neuron and all clusters to which that neuron is not assigned.  #@NEW_LINE#@#  The threshold distance is set to be the largest distance for which a distance is more likely to be found in the correctly assigned distribution than the null distribution.  #@NEW_LINE#@#  

Algorithm_implementation  #@NEW_LINE#@#  
The analysis was performed on Princeton Universitys high-performance scientific computing cluster, Della primarily consisting of 240 nodes and 4288 cores, each with 2.4 GHz processors.  #@NEW_LINE#@#  Jobs were run on up to 200 cores simultaneously.  #@NEW_LINE#@#  Timing information for the steps listed in Fig 1 are described below and summarized in Table 1.  #@NEW_LINE#@#  


Supporting_information  #@NEW_LINE#@#  
S1_Movie_Example_video_for_raw__straightened__and_tracked_data  #@NEW_LINE#@#  
Left: Raw video feed from high magnification RFP video.  #@NEW_LINE#@#  The imaging plane is scanning up and down through the volume of the worms brain.  #@NEW_LINE#@#  The recording is shown at 1/2Ã speed and the time elapsed is indicated in the bottom left.  #@NEW_LINE#@#  Middle: Maximum intensity projection of each volume is shown after Worm Centerline Tracking and Straightening.  #@NEW_LINE#@#  Right: Locations of neurons are shown at the end of the pipeline (after Neuron Registration Vector Encoding, Clustering and Error Correction).  #@NEW_LINE#@#  Each color represents a different tracked neuron.  #@NEW_LINE#@#  All neurons from the volume are shown overlaid on a raw image of the middle plane of each volume.  #@NEW_LINE#@#  Note a light flash used for time synchronization is visible around t = 13s.  #@NEW_LINE#@#  
https://doi.org/10.1371/journal.pcbi.1005517.s001  #@NEW_LINE#@#  
(MP4)  #@NEW_LINE#@#  


Acknowledgments  #@NEW_LINE#@#  
The analysis presented in this article was performed on computational resources supported by the Princeton Institute for Computational Science and Engineering (PICSciE), the Office of Information Technologys High Performance Computing Center and Visualization Laboratory at Princeton University and by John Wiggins, Manager of Information Technology at the Princeton Neuroscience Institute.  #@NEW_LINE#@#  

Author_Contributions  #@NEW_LINE#@#  


Conceptualization: AML JWS JPN.  #@NEW_LINE#@#  
Formal analysis: JPN.  #@NEW_LINE#@#  
Funding acquisition: AML.  #@NEW_LINE#@#  
Investigation: JPN ANL.  #@NEW_LINE#@#  
Methodology: JPN ANL.  #@NEW_LINE#@#  
Project administration: AML.  #@NEW_LINE#@#  
Resources: JPN ANL GSP.  #@NEW_LINE#@#  
Software: JPN ANL.  #@NEW_LINE#@#  
Supervision: AML.  #@NEW_LINE#@#  
Validation: JPN.  #@NEW_LINE#@#  
Writing  original draft: JPN.  #@NEW_LINE#@#  
Writing  review & editing: AML JWS.  #@NEW_LINE#@#  



References  #@NEW_LINE#@#  



