article id="http://dx.doi.org/10.1371/journal.pone.0140866"  #@NEW_LINE#@#  
title  #@NEW_LINE#@#  
A Cognitive Neural Architecture Able to Learn and Communicate through Natural Language  #@NEW_LINE#@#  

Abstract  #@NEW_LINE#@#  
Communicative interactions involve a kind of procedural knowledge that is used by the human brain for processing verbal and nonverbal inputs and for language production.  #@NEW_LINE#@#  Although considerable work has been done on modeling human language abilities, it has been difficult to bring them together to a comprehensive tabula rasa system compatible with current knowledge of how verbal information is processed in the brain.  #@NEW_LINE#@#  This work presents a cognitive system, entirely based on a large-scale neural architecture, which was developed to shed light on the procedural knowledge involved in language elaboration.  #@NEW_LINE#@#  The main component of this system is the central executive, which is a supervising system that coordinates the other components of the working memory.  #@NEW_LINE#@#  In our model, the central executive is a neural network that takes as input the neural activation states of the short-term memory and yields as output mental actions, which control the flow of information among the working memory components through neural gating mechanisms.  #@NEW_LINE#@#  The proposed system is capable of learning to communicate through natural language starting from tabula rasa, without any a priori knowledge of the structure of phrases, meaning of words, role of the different classes of words, only by interacting with a human through a text-based interface, using an open-ended incremental learning process.  #@NEW_LINE#@#  It is able to learn nouns, verbs, adjectives, pronouns and other word classes, and to use them in expressive language.  #@NEW_LINE#@#  The model was validated on a corpus of 1587 input sentences, based on literature on early language assessment, at the level of about 4-years old child, and produced 521 output sentences, expressing a broad range of language processing functionalities.  #@NEW_LINE#@#  

Introduction  #@NEW_LINE#@#  
The attempts to build artificial systems capable of simulating important aspects of human cognitive abilities have a long history, and have contributed to the debate among two different theoretical approaches, the computationalism and the connectionism.  #@NEW_LINE#@#  According to the computational theory of mind, the brain is an information processing system, and thought can be described as a computation that operates on mental states [1,2].  #@NEW_LINE#@#  This perspective has led to the implementation of a class of cognitive architectures called symbolic [35] (see Ref.s [6] and [7] for a review).  #@NEW_LINE#@#  Different criteria have been proposed for the classification of cognitive architectures [6,8].  #@NEW_LINE#@#  We will use here the simple taxonomy proposed by Duch et al.  #@NEW_LINE#@#  [6], which focuses on how information is represented and processed.  #@NEW_LINE#@#  In symbolic architectures, information is represented by high-level symbols.  #@NEW_LINE#@#  Cognition takes place as a computation that operates on symbol structures and produces symbolic outputs.  #@NEW_LINE#@#  Symbolic architectures can realize high-level cognitive functions, such as complex reasoning and planning.  #@NEW_LINE#@#  However, the main issue of such architectures is that all information must be represented and processed in the form of symbols pertaining to a predefined domain.  #@NEW_LINE#@#  This constraint makes it difficult for such systems to recognize regularities in large datasets, particularly in presence of noisy data and in dynamic environments.  #@NEW_LINE#@#  
The central idea of the connectionist approach is that mental processes can be modeled as emergent processes of networks of highly interconnected processing units.  #@NEW_LINE#@#  The information is represented by activation signals flowing through such networks.  #@NEW_LINE#@#  The most used type of connectionist model is the artificial neural network (ANN) model, which has been widely used to account for different aspects of human cognition, including memory, perception, attention, pattern recognition and language.  #@NEW_LINE#@#  In many cases, connectionist architectures have been very effective in explaining some features of human behavior described by psychological findings.  #@NEW_LINE#@#  However, up to now they have never been implemented in large scale simulations for tasks that require complex reasoning [6].  #@NEW_LINE#@#  Recently, Eliasmith et al.  #@NEW_LINE#@#  proposed a 2.5-million neuron model of the brain, able to process visual image sequences and to respond through movements of a physically modeled arm [9].  #@NEW_LINE#@#  Other large-scale neural simulations have been reported [10,11], however they focus on biological realism of the neuron model, while none of them deal with the problem of natural language elaboration.  #@NEW_LINE#@#  
The symbolic approach dominated the research in the field of natural language processing (NLP) for several decades.  #@NEW_LINE#@#  Natural language itself appears to be a strong symbolic activity, because words can be considered symbols used to represent real objects, concepts, events, and actions.  #@NEW_LINE#@#  The formal language theory, introduced in the '50s, used algebra and set theory to define formal languages as sequences of symbols.  #@NEW_LINE#@#  This theory includes the context-free grammar, defined by Chomsky [12].  #@NEW_LINE#@#  Today the field of NLP is dominated by machine learning approaches, which include neural-network based approaches, support vector machine, Bayesian approaches and many others (See Ref.  #@NEW_LINE#@#  [13] for a review).  #@NEW_LINE#@#  Neural network language models have widely been used in NLP, demonstrating superior performances in next-word prediction and other standard NLP tasks over conventional approaches, such as n-gram models.  #@NEW_LINE#@#  Recently, deep learning techniques based on recurrent neural networks (RNNs) have been used successfully for several NLP tasks, including speech recognition [14], parsing [15,16], machine translation [17], sentiment analysis of text [18].  #@NEW_LINE#@#  Although some of these models are biologically inspired, they are mainly designed as engineering solutions to specific problems in NLP.  #@NEW_LINE#@#  It is important to outline that NLP has been treated very differently in computer science, linguistics, and cognitive science.  #@NEW_LINE#@#  The connectionist approach demonstrated to be suitable for modeling the cognitive foundations of language processing [1921].  #@NEW_LINE#@#  Connectionist models have been used to explain the emergence of language skills with only simple learning rules that operate at a neural level, instead of requiring detailed innate knowledge.  #@NEW_LINE#@#  The connectionist approach emphasizes the role of learning through the interaction with the environment.  #@NEW_LINE#@#  According to this approach, language skills are the behavioral manifestation of internal representations and processes that take place in the brain.  #@NEW_LINE#@#  Although connectionist models have been widely used in the field of NLP, little work was done to integrate neural models of language into comprehensive cognitive models compatible with current knowledge of how verbal information is stored and processed in the brain, i.e.  #@NEW_LINE#@#  with verbal working memory models.  #@NEW_LINE#@#  Miikkulainen [21,22] and Fidelman et al.  #@NEW_LINE#@#  [23] presented a cognitive neural architecture able to parse script-based stories, to store them in episodic memory, to generate paraphrases of the narratives, and to answer questions about them.  #@NEW_LINE#@#  Their model was tested on a small corpus of nine scripts, each of which consisted of 47 sentences.  #@NEW_LINE#@#  
Dominey and Hinaut [24,25] proposed a neural model of brain areas involved in language processing, able to learn grammatical constructions and to generalize the acquired knowledge to novel constructions.  #@NEW_LINE#@#  In their work, language understanding is identified as the ability to recognize the thematic role of the open-class words in the surface form of sentences, and meaning is interpreted as a mapping from the surface form to a functional form of sentences.  #@NEW_LINE#@#  This notion of understanding is not sufficient for the purpose of the present work, which is more focused on the elaboration of verbal information in the working memory.  #@NEW_LINE#@#  The purpose of our work is to contribute to understanding the mechanisms that make the human brain able to develop a broad range of language processing skills, starting from a tabula rasa condition.  #@NEW_LINE#@#  Such skills involve a procedural knowledge that is used to process verbal information at the sentence level, to combine it with information retrieved from long-term memory, to select relevant items and to plan language production.  #@NEW_LINE#@#  Here we present a comprehensive cognitive neural model, aimed at explaining how this procedural knowledge is developed, through a neural-network structure and biologically motivated learning rules.  #@NEW_LINE#@#  
Our model uses adaptive neural gating mechanisms to control the flow of information among different subsystems of the short-term memory.  #@NEW_LINE#@#  Such mechanisms are controlled by a state-action association system, which learns through Hebbian changes in the synaptic strengths.  #@NEW_LINE#@#  We claim that this model can develop from tabula rasa a broad range of language processing functionalities.  #@NEW_LINE#@#  We propose that adaptive neural gating mechanisms have an important role in the development of language processing skills at the sentence level.  #@NEW_LINE#@#  We test our hypothesis by evaluating our model on a database based on literature on early language assessment, using a k-fold cross-validation technique.  #@NEW_LINE#@#  
Working_memory_models  #@NEW_LINE#@#  
Although there are different perspectives regarding the organization of memory in the human brain, all approaches recognize at least two types of memory: the short-term memory (STM) and the long-term memory (LTM).  #@NEW_LINE#@#  STM can be defined as the capacity of the human mind to hold a limited amount of information in a readily accessible state for a short period of time.  #@NEW_LINE#@#  In contrast, LTM is a large repository of knowledge and of information on prior events, which can be stored in the mind for long periods of time.  #@NEW_LINE#@#  The term working-memory (WM) has been defined in different ways, however most researchers assume that WM includes (at least) the STM and the processing mechanisms used for temporarily storing and manipulating information in the STM.  #@NEW_LINE#@#  
In 1974, Baddeley and Hitch [26] proposed a working memory model composed of three main components: a central executive and two slave systems, i.e.  #@NEW_LINE#@#  the phonological loop and the visuo-spatial sketchpad.  #@NEW_LINE#@#  The central executive operates as a supervisory system by controlling the flow of information from and to the slave systems.  #@NEW_LINE#@#  The slave systems are responsible for short-term maintenance of information: the phonological loop stores verbal content, while the visuo-spatial sketchpad stores visual and spatial information.  #@NEW_LINE#@#  
In 2000, Baddeley [27] extended this model by adding a third slave system, the episodic buffer, which binds information from different domains (phonological, visual, spatial, semantic) to form integrated units of information with chronological ordering.  #@NEW_LINE#@#  Fig 1 shows a schematic diagram of this model.  #@NEW_LINE#@#  


              https://doi.org/10.1371/journal.pone.0140866.g001  #@NEW_LINE#@#  
Baddeley's model is supported by evidences from experimental psychology, neuropsychology and cognitive neuroscience (see Ref.  #@NEW_LINE#@#  [28] for a review).  #@NEW_LINE#@#  However, some criticism has been raised and alternative models have been proposed.  #@NEW_LINE#@#  Cowan [29] proposed a working memory model in which the LTM was not a separate component, but a part of the working memory.  #@NEW_LINE#@#  Cowan's model consists of four components: a central executive, a LTM, an activated memory and a focus of attention.  #@NEW_LINE#@#  The central executive directs attention and controls voluntary processing.  #@NEW_LINE#@#  The activated memory is the subset of LTM in a state of temporal activation, and it can hold a large number of activated elements.  #@NEW_LINE#@#  The focus of attention is a subset of the activated memory.  #@NEW_LINE#@#  It has a limited capacity and can hold up to about four independent items or chunks.  #@NEW_LINE#@#  According to Baddeley, the differences between his view and that of Cowan are mainly in "emphasis and terminology" [28].  #@NEW_LINE#@#  In particular, the episodic buffer of his model has a similar role to Cowan's focus of attention.  #@NEW_LINE#@#  McElree [30] suggested a focus of attention limited to a single chunk.  #@NEW_LINE#@#  Oberauer [31] proposed a model that distinguishes three states of representations in WM: the activated part of LTM, the region of direct access and the focus of attention.  #@NEW_LINE#@#  The region of direct access roughly corresponds to the broader focus of attention in Cowan's model, with a scope of about four chunks.  #@NEW_LINE#@#  The focus of attention in Oberauer's model corresponds to the single-chunk focus of McElree's model.  #@NEW_LINE#@#  The function of the focus of attention is to select a single item or chunk from the direct-access region.  #@NEW_LINE#@#  

The_mental_action_sequence  #@NEW_LINE#@#  
In classical tasks used to study working memory capacity [31], a subject is asked to hold in mind a short sequence of digits and to perform some simple process on each of these digits (or on a subset), for example adding the number two to each digit.  #@NEW_LINE#@#  Consider, for instance, the following task:  #@NEW_LINE#@#  
We assume that the subject has memorized additions with small numbers in LTM, so that the cognitive load for a single addition is small.  #@NEW_LINE#@#  The sequence of mental operations that are performed by the subject can be the following:  #@NEW_LINE#@#  
and so on, until the last digit is processed.  #@NEW_LINE#@#  Additionally, several studies [32,33] suggest that the task goal should be stored in the working memory in some directly accessible form.  #@NEW_LINE#@#  Therefore, the previous sequence should be extended by including at the beginning, before step 1, two other operations, such as:  #@NEW_LINE#@#  
In the next section we will illustrate how our model implements the "mental action sequence" (a,b,16), which includes the two actions a and b described above and the actions 16 listed previously.  #@NEW_LINE#@#  In the following sections, we will also demonstrate that a broad range of tasks in human language processing can be performed using iterations of this basic action sequence.  #@NEW_LINE#@#  A minimal system that can perform this sequence should include (at least) the following components:  #@NEW_LINE#@#  
At this point, one may wonder why a neural architecture is necessary to model this process.  #@NEW_LINE#@#  Apart from the obvious consideration that our brain is a neural architecture, why a symbolic model is not enough?  #@NEW_LINE#@#  What we try to emphasize in our work is that the decision processes operated by the central executive are not rule-based process, they are statistical decision processes.  #@NEW_LINE#@#  In our model, the central executive is a neural network that takes as input the signal from the STM components (the internal state) and provides as output mental actions that direct the flow of information among the slave systems.  #@NEW_LINE#@#  Therefore, the central executive should comprise a state-action association system.  #@NEW_LINE#@#  If the central executive was not a statistical tool, the system would not be able to generalize.  #@NEW_LINE#@#  But how might the generalization arise in the previous example?  #@NEW_LINE#@#  Suppose that an artificial model of the working memory was trained to respond to the "add the number two" task described above, and that it is tested on a similar task, but with different numbers:  #@NEW_LINE#@#  
Since this sentence is similar to that of the first task, the central executive will provide the same output, i.e.  #@NEW_LINE#@#  the same mental-action sequence.  #@NEW_LINE#@#  
Through this sequence, the system will extract the phrase "add the number three" and push it in the goal stack, then it will transfer the sequence "7 8 2 5" to the phonological store, it will transfer the first number (7) to the focus of attention and use it as a cue to retrieve information from LTM.  #@NEW_LINE#@#  Now we come to another question: why the retrieval process should be modeled using a neural architecture, or more generally why the retrieval process should be described as a statistical process?  #@NEW_LINE#@#  In principle there could be thousands of phrases that could be retrieved from LTM using the digit "7" as a cue.  #@NEW_LINE#@#  How can the system choose the appropriate phrase among them?  #@NEW_LINE#@#  The system can recognize that some of the phrases that can be retrieved from LTM using the digit 7 as a cue are similar to the one retrieved during the training stage, which was:  #@NEW_LINE#@#  
For instance  #@NEW_LINE#@#  
contain the cue (7) and are similar to phrase 1, in the sense that both phrase 2 and phrase 3 are close to phrase 1 in the input space of the state-action association system.  #@NEW_LINE#@#  Unfortunately, phrase 2 is closer.  #@NEW_LINE#@#  If the choice was based solely on similarity with the phrase retrieved during training, the system would choose phrase 2, and following the same action sequence of the training example, it would give a wrong answer, i.e.  #@NEW_LINE#@#  nine instead of ten.  #@NEW_LINE#@#  In our model, the generalization capabilities are supported by a comparison structure, which is an additional component of the STM that recognizes similarities among elements of different STM components.  #@NEW_LINE#@#  For instance, it can recognize that one word in the phonological store is equal to a word of the phrase stored in the goal stack.  #@NEW_LINE#@#  In our example, the comparison structure allows the system to recognize that the third word of phrase 2 ("three") is equal to the fourth word in the goal phrase "add the number three".  #@NEW_LINE#@#  In a simple neural model of the comparison structure, the neurons that compare those two words will be activated.  #@NEW_LINE#@#  Our model includes a comparison structure, which is part of the input to the state-action association system of the central executive.  #@NEW_LINE#@#  We will show that the connections from the comparison structure to the central executive are weighted more than the connections from the phonological store to the central executive, therefore in the above example the system will select phrase 3 rather than phrase 2, and it will give the correct answer.  #@NEW_LINE#@#  

Localization_of_the_verbal_working_memory_in_the_brain  #@NEW_LINE#@#  
Localization of brain areas that are involved in language comprehension and production requires the combination of findings from neuroimaging and psycholinguistic research.  #@NEW_LINE#@#  Several studies on the functional neuroanatomy of language indicate that both semantic and syntactic processes involve mainly the left frontal cortex and part of the temporal cortex [3438].  #@NEW_LINE#@#  The left frontal cortex is considered to be responsible for strategic and executive aspects of language processing.  #@NEW_LINE#@#  The left temporal cortex supports the processes that identify phonetic and lexical elements.  #@NEW_LINE#@#  It is involved in storage and retrieval of phonological, syntactic and semantic information form memory.  #@NEW_LINE#@#  
All classical neurobiological models of language attribute a fundamental role to Broca's area, which includes Brodmann's areas (BA) 44 and 45, in the left frontal cortex.  #@NEW_LINE#@#  Several studies show that BA 47 and the ventral part of BA 6 are also involved in language processing tasks [3436].  #@NEW_LINE#@#  The language-relevant part of the frontal cortex is thus the left inferior frontal gyrus (LIFG) which comprises BA 44, 45, 47 and 6.  #@NEW_LINE#@#  Results from neuroimaging and psycholinguistic studies show that LIFG is involved in the unification operations required for binding individual words into larger structures [37,38].  #@NEW_LINE#@#  Hagoort [37] proposes a model that distinguishes three functional components of language processing: memory, unification and control.  #@NEW_LINE#@#  Fig 2 shows the main areas of the cortex that support the three components.  #@NEW_LINE#@#  


              https://doi.org/10.1371/journal.pone.0140866.g002  #@NEW_LINE#@#  

Neural_gating_mechanisms  #@NEW_LINE#@#  
Neural gating mechanisms play an important role in the cortex and in other regions of the brain [39].  #@NEW_LINE#@#  They rely on the action of bistable neurons, i.e.  #@NEW_LINE#@#  neurons that can oscillate between a quiescent down state, associated with a hyperpolarized membrane potential, and an up state, characterized by a membrane potential that is just below the cell's firing threshold.  #@NEW_LINE#@#  The gatekeeper neurons can modulate the membrane potential of the bistable neurons, shifting them from the down state to the up state and vice versa.  #@NEW_LINE#@#  Different types of neural gating mechanisms have been observed in the brain.  #@NEW_LINE#@#  Fig 3 represents the type of gating mechanism that is exploited in our model.  #@NEW_LINE#@#  In this example, a gatekeeper neuron is fully connected to a set of bistable neurons.  #@NEW_LINE#@#  When the gating signal is off, the gate is closed: the bistable neurons are in the down state, and they do not respond to the input signal.  #@NEW_LINE#@#  Conversely, when the gating signal is on the gate is open: the bistable neurons are in the up state and they transmit the input signal to the second set of neurons.  #@NEW_LINE#@#  The bistable neurons therefore perform a type of biological AND relative to their inputs.  #@NEW_LINE#@#  
(adapted from Ref.  #@NEW_LINE#@#  [39]).  #@NEW_LINE#@#  


              https://doi.org/10.1371/journal.pone.0140866.g003  #@NEW_LINE#@#  


Methods  #@NEW_LINE#@#  
The_ANNABELL_model  #@NEW_LINE#@#  
The model presented in this work, called ANNABELL (Artificial Neural Network with Adaptive Behavior Exploited for Language Learning), is a cognitive neural architecture, designed to help understand the cognitive processes involved in early language development.  #@NEW_LINE#@#  The source code of the software, the User Guide and the datasets used for its validation are available in the ANNABELL web site at https://github.com/golosio/annabell/wiki).  #@NEW_LINE#@#  
The global organization of the system is compatible with the multicomponent working memory (M-WM) framework.  #@NEW_LINE#@#  However, our work is focused on the role of executive functions in language processing tasks, and not on many other important questions concerning WM, as those related to working memory capacity or information maintenance in STM.  #@NEW_LINE#@#  Therefore, for the sake of simplicity, our model does not take into account many effects that are of central importance for working memory theories, as for instance phonological/semantic similarity, word length effect, recency, and other effects in serial and free recall tasks.  #@NEW_LINE#@#  We also do not take a position in the controversy on whether information in the phonological store is maintained by passive storage or by active rehearsal, and it is again for reasons of simplicity that we have chosen passive maintenance.  #@NEW_LINE#@#  
The building blocks of the model are artificial neurons.  #@NEW_LINE#@#  The system is based on the concept of sparse-signal map (SSM).  #@NEW_LINE#@#  A SSM is simply an ANN that has only a small fraction of all neurons active at a given time.  #@NEW_LINE#@#  The advantage of this representation is that it can be implemented in a very efficient way both in terms of computation time and in terms of memory usage, therefore it can partially compensate for the relatively limited parallelism of available hardware compared to the biological brain.  #@NEW_LINE#@#  The design of the neuron model focused on computational efficiency rather than biological details.  #@NEW_LINE#@#  It is important to point out that the purpose of this approach it not an engineering solution to the human-machine dialogue problem, but a cognitive model of how verbal information is processed in the brain.  #@NEW_LINE#@#  Computational efficiency is necessary for building a large-scale neural model of the verbal working memory, able to sustain a long training procedure on a relatively large database.  #@NEW_LINE#@#  
The system is composed by several SSMs, connected to each other either by fixed-weight or by variable-weight (learnable) connections.  #@NEW_LINE#@#  The latter ones are updated through a discrete version of the Hebbian learning rule, combined with the k-winner-take-all rule.  #@NEW_LINE#@#  Most of the learnable connections are virtual: they are not actually allocated in memory, unless their default weight value is modified.  #@NEW_LINE#@#  As will be explained below, a connection weight is modified only if the presynaptic neuron is active and the postsynaptic neuron is one the winners of the k-winner-take-all competition.  #@NEW_LINE#@#  As the signal is sparse, only a small fraction of the neurons is active at a given time, therefore most learnable connections remain virtual, i.e.  #@NEW_LINE#@#  they are not allocated in memory.  #@NEW_LINE#@#  With this approach memory requirements and, most importantly, computation time are greatly reduced compared to conventional techniques.  #@NEW_LINE#@#  The use of virtual connections produces a gain of more than three orders of magnitude in execution time, because the weighted sum used to compute the neuron input signals (which is the part of the simulation that takes most of the execution time) is limited to the connections that are actually allocated in memory.  #@NEW_LINE#@#  
The communication between the system and the human interlocutor is achieved through an interface that converts words into input patterns, submits them one by one to the system, extracts output patterns and converts them to words.  #@NEW_LINE#@#  The network architecture is designed in such a way that the system can process phrases using mental actions, which are elementary operations on word groups and phrases that are used, for instance, for acquiring the words of the input phrases, for memorizing phrases, for extracting word groups from the working phrase, for retrieving memorized phrases from word groups through an association mechanism, etc.  #@NEW_LINE#@#  Such actions are performed by special neurons, called mental action neurons, which can control the flow of signal between different subnetworks.  #@NEW_LINE#@#  A key feature of the model is that the connections that are affected by the reward mechanism are connected to mental action neurons, rather than being directly connected to output words or phrases.  #@NEW_LINE#@#  In this way, the system learns preferentially to build the output through sequences of elementary operations on word groups or phrases.  #@NEW_LINE#@#  This type of architecture underpins the generalization capabilities of the system.  #@NEW_LINE#@#  
The system was implemented on a PC equipped with a high-performance GPU (graphics processing unit) NVIDIA Kepler GK104 having 1536 processing units (called cores).  #@NEW_LINE#@#  GPUs are programmable logic chips that are widely used not only for graphical applications, but more generally for high-performance-computing applications that require a high degree of parallelism.  #@NEW_LINE#@#  The current version of the system is composed by 2.1 million neurons, interconnected through 33 billion virtual connections.  #@NEW_LINE#@#  At the end of the complete learning process described in this work, the number of real (allocated) connections was 27 million.  #@NEW_LINE#@#  The size of the system is comparable to that of the neural architecture described in Ref.  #@NEW_LINE#@#  [9], although our model privileges computational efficiency over biological details.  #@NEW_LINE#@#  The ability to perform real time communication and the large scale of the network make our system adequate for sustaining a relatively long developmental process (this property is called open-ended, cumulative learning in developmental robotics [40]).  #@NEW_LINE#@#  The system is being trained through an approach that, compared to those used for other artificial systems, is much more similar to children language training.  #@NEW_LINE#@#  This process is conducted by personifying the system as a child in a virtual social environment.  #@NEW_LINE#@#  The validation of its performance is inspired by the literature on early language assessment.  #@NEW_LINE#@#  Test sessions are used to assess syntax, semantics, pragmatic language skills, communicative interactions, language processing skills and comprehension of sentence structure.  #@NEW_LINE#@#  

Learning_mechanisms_and_signal_flow_control  #@NEW_LINE#@#  
The ANNABELL system is entirely composed of interconnected artificial neurons, and all processes are achieved at the neural level.  #@NEW_LINE#@#  Although different subsystems can be distinguished by their function, the whole system has a unitary structure.  #@NEW_LINE#@#  The subnetworks are arranged in layers that determine the update order, with both forward and backward (recurrent) connections among different layers.  #@NEW_LINE#@#  
The system uses a standard artificial neuron model.  #@NEW_LINE#@#  The neurons are connected among each other by directional weighted connections (links).  #@NEW_LINE#@#  Three types of connections are used:  #@NEW_LINE#@#  
The total input signal of each neuron is evaluated as the weighted sum of the signals coming from its input connections:  #@NEW_LINE#@#  

where i is the neuron index, yi is its total input signal, Si is the set of neurons that are connected to the other ends of its input connections, j is an index that runs on the set Si, wij are the weights of the input connections, oj are the output signals of the neurons connected to its input, and bi is a bias signal.  #@NEW_LINE#@#  The neuron output is computed from the total input by a nonlinear activation function [41]:  #@NEW_LINE#@#  

which approaches zero as yi tends to minus infinity, or one as yi tends to plus infinity.  #@NEW_LINE#@#  Two types of activation functions are used in the model, i.e.  #@NEW_LINE#@#  the Heaviside step function for the neurons that receive their input from fixed-weight connections, and the logistic function [41] for the neurons that receive it from variable-weight connections.  #@NEW_LINE#@#  
In the subnetworks that have learnable input connections, the inhibitory competition among neurons is modeled using the k-winner-take-all rule, i.e.  #@NEW_LINE#@#  the k neurons with the highest activation state are switched on, while all the remaining neurons are left off.  #@NEW_LINE#@#  This rule provides a computationally effective approximation of the activation dynamics produced by inhibitory interneurons [42].  #@NEW_LINE#@#  The Hebbian theory provides a theoretical basis for the learning mechanisms in biological neural networks [41,43].  #@NEW_LINE#@#  According to this theory, the strength of the synaptic junction between two neurons is increased when the outputs of the two neurons are strongly correlated, i.e.  #@NEW_LINE#@#  when the two neurons fire together.  #@NEW_LINE#@#  In our model, the learnable connections are modified through a discrete version of the Hebbian learning rule (DHL rule), combined with the k-winner-take-all rule: the connection weight is modified only if the postsynaptic neuron is one of the k winners of the k-winner-take-all competition; if the presynaptic neuron at the other end of the connection is in the same activation state as the winner neuron (i.e.  #@NEW_LINE#@#  in the high-level state on) the connection weight is saturated to its maximum value.  #@NEW_LINE#@#  In the opposite case, it is saturated to its minimum value.  #@NEW_LINE#@#  A detailed description of the learning algorithms and of the statistical properties of the state-action association system is provided in S4 Appendix.  #@NEW_LINE#@#  
In the ANNABELL model, the flow of information among different parts of the system is controlled by the central executive, which includes a set of gatekeeper neurons, a set of mental-action neurons and a state-action association system (see Fig 4).  #@NEW_LINE#@#  


              https://doi.org/10.1371/journal.pone.0140866.g004  #@NEW_LINE#@#  
The gatekeeper neurons are neurons that can control the flow of signal between different subnetworks by acting in a similar way as an increase or a decrease of the bias signal, as described in the previous section.  #@NEW_LINE#@#  The output connections of the gatekeeper neurons are generally fully connected to one or more subnetworks, in such a way that they can allow or inhibit the flow of signal through such subnetworks.  #@NEW_LINE#@#  
The mental-action neurons are neurons that trigger elementary operations, called mental actions, on word groups, phrase buffers and other subnetworks.  #@NEW_LINE#@#  The output connections of the (mental) action neurons are connected to the gatekeeper neurons.  #@NEW_LINE#@#  Each action neuron performs a mental action by activating simultaneously one or more gatekeeper neurons.  #@NEW_LINE#@#  The connections between the action neurons and the gatekeeper neurons have fixed, predetermined weights, in such a way that each action neuron corresponds to a well-defined operation.  #@NEW_LINE#@#  
The mental action neurons and the gatekeeper neurons are based on the same simple neuron model used for all neurons of the system.  #@NEW_LINE#@#  Their specialization is only a result of the way how they are connected to other subnetworks.  #@NEW_LINE#@#  
The state-action association system is a structure that is trained by a rewarding procedure to associate mental actions to the internal states of the system.  #@NEW_LINE#@#  The input and the output connections of this system follow a distributed model, i.e.  #@NEW_LINE#@#  the state-action association network is fully connected to the subnetworks that represent the internal state of the system (input) and to the action neurons (output).  #@NEW_LINE#@#  Its input and output connections are updated through the DHL rule combined with the k-winner-take-all rule.  #@NEW_LINE#@#  Note that, although the gating signals are sent by the gatekeeper neurons, it is the state-action association system that controls which action neurons are active, and thus which gatekeeper neurons are active.  #@NEW_LINE#@#  Therefore the decision of which gates should be open and which should not is made by the state-action association system.  #@NEW_LINE#@#  
A key feature of the ANNABELL system that is particularly important for its generalization capabilities is that the learnable connections that are affected by the reward (i.e.  #@NEW_LINE#@#  the connections of the state-action association SSM) are connected to action neurons, rather than being directly connected to output words or phrases.  #@NEW_LINE#@#  In this way, the system learns preferentially to build the output through sequences of elementary operations on word groups or phrases.  #@NEW_LINE#@#  

Global_organization_of_the_model  #@NEW_LINE#@#  
The global organization of our model is compatible with the M-WM framework.  #@NEW_LINE#@#  This section presents an overview of the system architecture and operating modes.  #@NEW_LINE#@#  S5 Appendix provides a detailed description of the architecture, while S3 Appendix describes in detail how the neural activation patterns evolve and how the connection weights are modified on concrete examples.  #@NEW_LINE#@#  However we must point out that the details of the implementation and further divisions in subcomponents, as described in S3 Appendix and in S5 Appendix, mainly respond to the need of building a neural-network model suitable for simulations that produce cognitively relevant behavior, and should not be considered as a premature attempt to map the model architecture to neural circuits in the biological brain.  #@NEW_LINE#@#  
The ANNABELL model comprises four main components, as shown in Fig 4: a verbal short-term memory (STM), a verbal long-term memory (LTM), a central executive (CE) and a reward structure.  #@NEW_LINE#@#  
The STM includes a phonological store, a focus of attention, a goal stack and a comparison structure.  #@NEW_LINE#@#  The phonological store maintains the working phrase.  #@NEW_LINE#@#  The focus of attention holds up to about four words.  #@NEW_LINE#@#  It is involved in several functions, including language production planning, and it is also used as a cue for retrieving information from LTM.  #@NEW_LINE#@#  For reasons of simplicity, our model does not include a visuo-spatial system or other types of sensory inputs; therefore, unlike Baddeley's episodic buffer, the focus of attention of our model can hold only verbal content.  #@NEW_LINE#@#  The goal stack is a structure for storing goal chunks that contribute to decision-making processes.  #@NEW_LINE#@#  The comparison structure recognizes similarities among words in the phonological store, in the focus of attention and in the goal stack, and is also used for decision-making processes.  #@NEW_LINE#@#  The LTM includes a structure for memorizing phrases and a retrieval structure that uses the focus of attention as a cue for retrieving memorized phrases.  #@NEW_LINE#@#  The CE is a supervisory system that controls all decision-dependent processes through neural gating mechanisms, as described in the previous section.  #@NEW_LINE#@#  It is important to outline that the central executive does not necessarily correspond to a well-localized area of the brain.  #@NEW_LINE#@#  It is a system that accounts for functions that could be distributed in different areas.  #@NEW_LINE#@#  How such functions map onto anatomical locations is an empirical question that is still under investigation.  #@NEW_LINE#@#  
The reward structure memorizes and retrieves the sequences of internal states of the system and the mental actions performed by the system (state-action sequences).  #@NEW_LINE#@#  When an exploration phase produces a target output, the reward structure retrieves the state-action sequence, and it rewards the association between each internal state and the corresponding mental action, by triggering Hebbian changes of the state-action association synaptic weights.  #@NEW_LINE#@#  
Mental actions, executed through neural gating mechanisms, are used to perform elementary operations on phrases, as increasing the phrase index, extracting a single word from the working-phrase buffer and mapping it to the word-group buffer, retrieving a memorized phrase from a word group, storing the working phrase in the goal stack, etc.  #@NEW_LINE#@#  The system can perform three types of actions.  #@NEW_LINE#@#  
A complete list of the actions is presented in S5 Appendix.  #@NEW_LINE#@#  
The ANNABELL system is composed of several subnetworks.  #@NEW_LINE#@#  Fig 5 represents a schematic diagram of the main subnetworks in the STM and in the LTM.  #@NEW_LINE#@#  Each rectangular block in this diagram represents a subnetwork composed by interconnected artificial neurons.  #@NEW_LINE#@#  A detailed description of the system architecture is provided in S5 Appendix.  #@NEW_LINE#@#  
Each rectangle represents a subnetwork, which is composed by interconnected artificial neurons.  #@NEW_LINE#@#  Only the main subnetworks are represented in this diagram.  #@NEW_LINE#@#  The arrows that join the rectangles represent directional connections among neurons of different subnetworks.  #@NEW_LINE#@#  


              https://doi.org/10.1371/journal.pone.0140866.g005  #@NEW_LINE#@#  
The communication is achieved through a user interface between the human interlocutor and the system.  #@NEW_LINE#@#  The interface converts words into input patterns and submits them one by one to the system, extracts output patterns and convert them to words.  #@NEW_LINE#@#  It also sends reward signals to the system when prompted by the human.  #@NEW_LINE#@#  The interface includes a monitor tool that can be used to display the content of the SSMs that compose the system.  #@NEW_LINE#@#  
The system can work in five operating modes, which are briefly described below.  #@NEW_LINE#@#  
The basic action sequence used during the exploration operating mode is the following:  #@NEW_LINE#@#  
N1 and N2 are random integer numbers.  #@NEW_LINE#@#  N1 can eventually be null, while N2 must be greater than or equal to one.  #@NEW_LINE#@#  The range of N1 and N2 depends on the maximum phrase size (ten words in the current implementation).  #@NEW_LINE#@#  Additionally, the system can eventually execute the following actions:  #@NEW_LINE#@#  
The basic action sequence can be iterated more times, until the system produces an output.  #@NEW_LINE#@#  If the output does not correspond to the target output, the whole process is restarted.  #@NEW_LINE#@#  
When the working phrase indicates a task that cannot be executed immediately, it can be set as a goal by inserting it in a SSM that acts as a goal stack with the action PUSH_GOAL.  #@NEW_LINE#@#  When the goal is reached, the phrase can be removed from the stack with the action DROP_GOAL.  #@NEW_LINE#@#  
S3 Appendix describes in detail, on two examples, how the neural activation patterns evolve, how the connection weights are modified during training, and how these weight changes make the system able to generalize the acquired knowledge to new sentences.  #@NEW_LINE#@#  

The_database  #@NEW_LINE#@#  
The database of sentences used for training and testing the system is organized in five datasets, each devoted to a thematic group, i.e.  #@NEW_LINE#@#  people, parts of the body, categorization, communicative interactions and movement in a text-based virtual environment.  #@NEW_LINE#@#  Each of those datasets includes declarative sentences, conversational sentences and interrogative sentences.  #@NEW_LINE#@#  Declarative sentences are used to give some information to the system without expecting a response.  #@NEW_LINE#@#  As the system has no sensory input, apart from that provided by the text-based interface, all the information must be provided in the form of input sentences.  #@NEW_LINE#@#  Interrogative sentences are questions that expect an answer from the system.  #@NEW_LINE#@#  In the training stage, for each question the teacher suggests the associations that can be used to build a valid answer.  #@NEW_LINE#@#  In the test stages, the questions are used to verify whether the system is able to generalize what it learned during the training phase.  #@NEW_LINE#@#  An answer is considered to be correct only if it is both syntactically and semantically correct.  #@NEW_LINE#@#  
Conversational sentences that expect a turn taking from the system are treated in the same way as the questions: for this type of sentences, in the training stage the teacher suggests response sentences that are appropriate for the conversation.  #@NEW_LINE#@#  On the other hand, conversational sentences that do not expect a turn taking are treated as declarative sentences.  #@NEW_LINE#@#  

The_people_dataset  #@NEW_LINE#@#  
The first dataset is devoted to the subject people, and it is partially inspired by the Language Development Survey work of Rescorla et al.  #@NEW_LINE#@#  [44,45].  #@NEW_LINE#@#  The sentences of this dataset have been prepared by personifying the system in a four years old little girl in her social environment, which includes the two parents, a sister, a friend, two cousins, the four grandparents, two aunts, two uncles and six other children, for a total number of twenty persons.  #@NEW_LINE#@#  Four of those persons, namely the two parents, the sister and the friend, are considered to have a closer relationship to the system, which means that the dataset provides more information for those four persons than for the others.  #@NEW_LINE#@#  In some cases, the two cousins are also included in the group of closer persons.  #@NEW_LINE#@#  Some sentences depend on the possible relationships between the persons and the system.  #@NEW_LINE#@#  In such case, we distinguish nine types of relationships, i.e.  #@NEW_LINE#@#  father, mother, sister, friend, cousin, grandmother, grandfather, aunt and uncle.  #@NEW_LINE#@#  The six other children are included in the social environment mainly for training and evaluating the system in age comparison tasks.  #@NEW_LINE#@#  Some declarative sentences (how-to sentences) are used to provide prescriptions on how to accomplish some specific tasks, as for instance to answer if someone is younger or older than you, you should compare your age with his age or to express language rules in a simple verbal form, as the possessive pronoun for a woman is her.  #@NEW_LINE#@#  
Table 1 shows the types of declarative sentences used in the people dataset.  #@NEW_LINE#@#  The total number of declarative sentences in this dataset is 225.  #@NEW_LINE#@#  
The social environment described in this dataset includes twenty persons.  #@NEW_LINE#@#  In the second column, less_thanperson can be Mum, Dad, or the name of one of the other eighteen persons, less_thanrelationship can be father, mother, sister, friend, cousin, Grandma, Grandpa, aunt or uncle.  #@NEW_LINE#@#  less_thannumber can be a number or, in row 21, also some or many.  #@NEW_LINE#@#  The (s) denotes the possibility of a plural form.  #@NEW_LINE#@#  In row 15, less_thanverb and less_thancomplement describe the profession in terms understandable for a preschool child, e.g.  #@NEW_LINE#@#  the journalist writes in the newspaper.  #@NEW_LINE#@#  The sentences in row 24 use the present progressive, as in Susan is reading a book.  #@NEW_LINE#@#  The sentences in row 25 (how-to sentences) are verbal prescriptions, expressed through the natural language, that are used to instruct the system on how to perform specific tasks in language processing.  #@NEW_LINE#@#  


              https://doi.org/10.1371/journal.pone.0140866.t001  #@NEW_LINE#@#  
The questions used in the people dataset are also inspired by the work of Rescorla [44,45], and they are appropriate for a preschool child, as in the following examples:  #@NEW_LINE#@#  
etc.  #@NEW_LINE#@#  A full list of the declarative sentences and of the questions can be found in the files that are distributed with the software package.  #@NEW_LINE#@#  They explore the meaning of words, but they are also used to train the system for language and reasoning skills, as:  #@NEW_LINE#@#  
The following question/answer example illustrates some of the abilities acquired by the system:  #@NEW_LINE#@#  
Q: is your friend younger than you?  #@NEW_LINE#@#  
A: no, she is older.  #@NEW_LINE#@#  
The system is able to answer the question Q by following a line of reasoning that it has learned through the communication with the human, thanks to its adaptive behavior.  #@NEW_LINE#@#  The system uses the past experience listed below.  #@NEW_LINE#@#  
The teacher taught the system to answer questions similar to the question Q, guiding it through a series of mental operations (associations and extractions of word groups from sentences), through the exploration-reward method described previously.  #@NEW_LINE#@#  At this point the system is able to generalize the procedure and to answer questions similar to those used for training.  #@NEW_LINE#@#  
It is important to emphasize that this whole process takes place in the system at a subsymbolic (neural) level and that phrase memorization and learning take place in the form of synaptic weight changes through the DHL rule.  #@NEW_LINE#@#  The examples shown in S1 Appendix show in more detail how the system is trained to answer a question.  #@NEW_LINE#@#  

The_parts_of_the_body_dataset  #@NEW_LINE#@#  
The second dataset is devoted to the main parts of the body, and it is also partially based on the words of this subject category included in the Language Development Survey.  #@NEW_LINE#@#  Through this dataset, the system is trained to recognize the definition of a word as well as different ways to specify the location of an object.  #@NEW_LINE#@#  After the training, the system should be able to answer questions of the type what is and where is.  #@NEW_LINE#@#  Table 2 represents the type of declarative sentences used in this dataset.  #@NEW_LINE#@#  Thirty-three body parts are considered.  #@NEW_LINE#@#  For each of them, a declarative sentence provides a simple definition in a form that should be understandable for a preschool child.  #@NEW_LINE#@#  Other sentences specify the locations of the body parts.  #@NEW_LINE#@#  It can be observed that in this case the correspondence between body parts and sentences is not one-to-one, because the location of a body part can be described in more than one way.  #@NEW_LINE#@#  Eight declarative sentences describe in simple terms what is the function of some body parts, e.g.  #@NEW_LINE#@#  with your legs you can walk, run and jump and finally, six sentences are how-to sentences.  #@NEW_LINE#@#  The total number of declarative sentences in the parts of the body dataset is 122.  #@NEW_LINE#@#  
Thirty-three body parts are included in the dataset.  #@NEW_LINE#@#  In the first column, less_thanpart is the name of a body part.  #@NEW_LINE#@#  The (s) refers to a possible plural form.  #@NEW_LINE#@#  


              https://doi.org/10.1371/journal.pone.0140866.t002  #@NEW_LINE#@#  
Only five types of questions are used in this dataset, i.e.  #@NEW_LINE#@#  

The_categorization_dataset  #@NEW_LINE#@#  
The third dataset is used for evaluating the categorization capabilities of the system.  #@NEW_LINE#@#  This dataset uses 62 different animal names from 6 categories: 13 mammals, 13 birds, 13 fishes, 8 reptiles, 4 amphibians, 11 insects.  #@NEW_LINE#@#  The animal name memberships to the six categories are specified by 62 declarative sentences of the form:  #@NEW_LINE#@#  
where less_thananimal is an animal name, and less_thancategory is one of the six categories listed previously, as for instance:  #@NEW_LINE#@#  
and one how-to sentence are included to train the system to deal with categorization hierarchies.  #@NEW_LINE#@#  The dataset also includes 48 declarative sentences of the form:  #@NEW_LINE#@#  
where less_thanadjective is one of the five adjectives: big, dangerous, domestic, fast or small.  #@NEW_LINE#@#  The total number of sentences in this dataset is 117.  #@NEW_LINE#@#  
In the training stage, the human teacher asks the system to tell him an animal belonging to one of the categories, e.g.  #@NEW_LINE#@#  
then he guides the system to a correct answer, as shown in detail in Sect.  #@NEW_LINE#@#  2 in S1 Appendix.  #@NEW_LINE#@#  A single training example, involving one animal name from one category, is sufficient.  #@NEW_LINE#@#  After that, the system is able to answer correctly the analogous question for all 6 categories.  #@NEW_LINE#@#  This test shows that the system is able to learn that the is a couple is used in sentences as the dog is a mammal to state that a concept belongs to a category, and that the tell me a group in a question can be used for asking to retrieve a concept from a category.  #@NEW_LINE#@#  A more complex categorization task in the same dataset involves the ability to learn categorization hierarchies.  #@NEW_LINE#@#  In this case, the human asks the system two consecutive questions, as in the following example:  #@NEW_LINE#@#  
Other questions in this dataset are used to evaluate the system capability to combine information on categories and adjectives, as in the following example:  #@NEW_LINE#@#  

The_communicative_interactions_dataset  #@NEW_LINE#@#  
The fourth session is devoted to communicative interactions, and it is based on a mother/child dialogue extracted from the Warren-Leubecker corpus [46,47], which is part of the CHILDES database [48].  #@NEW_LINE#@#  This corpus contains data from 20 children interacting with one of their parents.  #@NEW_LINE#@#  
The sessions took place in the childs home.  #@NEW_LINE#@#  The parent was instructed to bring the child into conversation and to talk to him as naturally as possible.  #@NEW_LINE#@#  This corpus appeared to be more appropriate than others for training the system, because the children ages were appropriate and because verbal communication was predominant over nonverbal communication, play and actions.  #@NEW_LINE#@#  The session used in this work is based on the file david.cha, which contains a transcription of the dialogue between a 5-years-and-10-months-old child and his mother.  #@NEW_LINE#@#  
The system was trained in a text-based virtual environment.  #@NEW_LINE#@#  First, we guessed what kind of past experiences of the child could be compatible with the David dialogue: one day a relative brought the child to an amusement park; the child played to a video game (Pacman).  #@NEW_LINE#@#  Another day, at the kindergarten, the teacher organized a costume party, where each child should dress as a character that represents a letter of the alphabet.  #@NEW_LINE#@#  At home, the mother helped the child to prepare his letterman dress.  #@NEW_LINE#@#  Those past experiences are described through a first set of 52 declarative sentences.  #@NEW_LINE#@#  Then we describe similar possible past experiences of the child impersonated by the system (a little girl, in our case): one day her father brought her, her sister and her cousin to the central park, where they played hide-and-seek and other games; another day, she was in Susan's room; aunt Carol told Susan to tidy up her room, therefore Susan started to put things inside her toy-box Those experiences are described through another set of 44 declarative sentences, similar in syntax but different in the content from those of the first set.  #@NEW_LINE#@#  The training is based on this second set.  #@NEW_LINE#@#  Other 18 sentences in this dataset are how-to sentences.  #@NEW_LINE#@#  The human teacher guided the system into a conversation similar in syntax to the David dialogue, but related to a different past experience, and suggested either possible answers to the questions, or sentences appropriate for the conversation.  #@NEW_LINE#@#  In the test stage, the human interlocutor had a conversation with the ANNABELL system similar to that taken from the Warren-Leubecker corpus.  #@NEW_LINE#@#  Sect.  #@NEW_LINE#@#  2 in S2 Appendix shows a list of the declarative sentences used to build the system experience in a virtual text-based environment.  #@NEW_LINE#@#  Sect.  #@NEW_LINE#@#  3 in S2 Appendix shows the sentences used to train the system.  #@NEW_LINE#@#  

The_virtual_environment_dataset  #@NEW_LINE#@#  
The fifth dataset represents a text-based virtual environment, where the system is trained to perform simple tasks by means of verbal commands.  #@NEW_LINE#@#  The training is made in a virtual house with 25 room, named room_0, , room_24, arranged in a 5×5 square.  #@NEW_LINE#@#  A person is located in the central room, i.e.  #@NEW_LINE#@#  room_12, which is also the starting position of the system.  #@NEW_LINE#@#  Eight objects, named object_1, , object_8, are distributed randomly in the eight second-nearest-neighbor rooms, with the constraint that different objects should be located in different rooms.  #@NEW_LINE#@#  Each room has a description that specifies the accessible nearest neighbors and eventually the persons and/or objects that are present in it, as  #@NEW_LINE#@#  
Before the training, all room descriptions are presented to the system.  #@NEW_LINE#@#  Each training example starts by presenting to the system the description of the starting room (room_12) and by asking it to accomplish the task of bringing an object to the person:  #@NEW_LINE#@#  
then, the system is trained to issue the commands (north, south, east, west) for reaching the room where the object is located.  #@NEW_LINE#@#  Each time the system moves to a room, it receives the description of that room.  #@NEW_LINE#@#  When it reaches the target room, it is trained to take the object  #@NEW_LINE#@#  


              https://doi.org/10.1371/journal.pone.0140866.g006  #@NEW_LINE#@#  
Before starting it, the descriptions of all rooms are presented to the system.  #@NEW_LINE#@#  All possible combinations of starting room and target room are used in the test, using for simplicity the constraint that starting room and target room are second nearest neighbors.  #@NEW_LINE#@#  The number of combinations for this house is 28.  #@NEW_LINE#@#  For each combination, the system and a person are located in the starting room, and an object (a book) is located in the target room.  #@NEW_LINE#@#  After the description of the starting room, the system is asked to bring the object to the person:  #@NEW_LINE#@#  
As in the training stage, in order to perform this task, the system should issue the commands for reaching the target room, the command for taking the object, the commands for going back to the starting room, and the command for giving the object to the person.  #@NEW_LINE#@#  


Results  #@NEW_LINE#@#  
The training procedure is organized in five incremental language training sessions, one for each dataset.  #@NEW_LINE#@#  Each session is divided in two stages.  #@NEW_LINE#@#  During the first stage, a set of declarative sentences from the corresponding dataset is presented to the system through the interface.  #@NEW_LINE#@#  As the system does not have any other sensory input, all the information must be provided to it in the form of verbal descriptions.  #@NEW_LINE#@#  In the subsequent training stage, the teacher trains the system by asking it a set of questions related to the previous sentences, and by guiding it to produce the correct answers through the exploration-reward procedure described in Sect.  #@NEW_LINE#@#  Global organization of the model.  #@NEW_LINE#@#  
The evaluation of the system performance (test stage) is performed at the end of the five learning sessions, after the cumulative training on all five datasets.  #@NEW_LINE#@#  In this stage, the teacher evaluates the system by asking it a set of questions similar to the ones used during the training stages, and by testing the generalization capabilities of the system, i.e.  #@NEW_LINE#@#  its ability to process the information provided by the memorized sentences, and to answer questions having a similar structure to those presented during the training stages but involving different nouns, adjectives or verbs.  #@NEW_LINE#@#  The teacher also validates the linguistic competences of the system in the use of articles, nouns, verbs, adjectives, personal pronouns, possessive pronouns and other word classes.  #@NEW_LINE#@#  The system output sentences are considered valid if they are syntactically and semantically correct and appropriate for the conversation.  #@NEW_LINE#@#  The test related to the virtual environment dataset evaluates whether the system is able to generalize the knowledge acquired in the training stage, being able to follow similar commands involving different target rooms, objects, people.  #@NEW_LINE#@#  
Table 3 reports the number of declarative sentences, the number of interrogative sentences used for training, the number of interrogative sentences used for the test and the number of output sentences in the five datasets.  #@NEW_LINE#@#  
The conversational sentences that do not expect a turn taking from the system are treated as declarative sentences, while the ones that expect a turn taking are treated as interrogative sentences.  #@NEW_LINE#@#  The output sentences in the virtual environment (*) are actually commands issued by the system to perform actions in the environment itself.  #@NEW_LINE#@#  


              https://doi.org/10.1371/journal.pone.0140866.t003  #@NEW_LINE#@#  
Fig 7 shows how the the interrogative sentences of the first four datasets used in the training stages and those used in the test stages are distributed among the question categories.  #@NEW_LINE#@#  The virtual environment dataset was excluded from this statistic because in this case the interrogative sentence is always the same, i.e.  #@NEW_LINE#@#  it is the question what do you want to do?, which is used to ask the system what action it wants to perform.  #@NEW_LINE#@#  


              https://doi.org/10.1371/journal.pone.0140866.g007  #@NEW_LINE#@#  
In order to evaluate quantitatively the system performance, we used a four-rounds cross validation approach.  #@NEW_LINE#@#  The communicative interaction dataset was excluded, as it was not suitable for a cross validation.  #@NEW_LINE#@#  All the questions of the first three datasets were organized in groups, each group containing at least four interrogative sentences having similar structure.  #@NEW_LINE#@#  At each round, the training set was built by randomly extracting one or more questions from each group, with the constraint that the same question should not be used in different rounds.  #@NEW_LINE#@#  The remaining questions were used for the test.  #@NEW_LINE#@#  The order of the questions used for training and that of the questions used for the test were both randomized.  #@NEW_LINE#@#  
Concerning the virtual environment dataset, the four rounds of the cross validation used different starting seeds for extracting randomly the position of the target rooms used in the training stage.  #@NEW_LINE#@#  The test was always made in the virtual house shown in Fig 6, on all possible combinations of starting room and target room.  #@NEW_LINE#@#  
For each round of the cross validation, the system was first trained on all five datasets before testing it.  #@NEW_LINE#@#  In this way we could test the capabilities of the system to store all the information of the five datasets and to acquire new information without altering the past one.  #@NEW_LINE#@#  
In a single round of the cross validation, the system was trained and evaluated using 1587 input sentences, containing 595 different words, with an average number of 5.6 words per sentence.  #@NEW_LINE#@#  It produced 521 output sentences, containing 312 different words (expressive vocabulary), with an average number of 4.6 words per sentence.  #@NEW_LINE#@#  Fig 8 shows the distribution of the number of tokens (words) in the input sentences (a) and in the output sentences (b), the distribution of different tokens among word classes (c,d), and the percentage of word classes in the input and output sentences (e,f).  #@NEW_LINE#@#  
Distribution of the number of words in the input sentences (a) and in the output sentences (b); distribution of the words used in the input and output sentences among different word classes (c,d); percentage of word classes in the input and output sentences (e,f).  #@NEW_LINE#@#  


              https://doi.org/10.1371/journal.pone.0140866.g008  #@NEW_LINE#@#  
Table 4 reports the number of correct answers for the first three datasets and for the four rounds of the cross validation.  #@NEW_LINE#@#  Table 5 reports the number of tasks that were performed correctly by the system on the virtual environment dataset for the four rounds of the cross validation as a function of the number of training examples.  #@NEW_LINE#@#  
An answer to an interrogative sentence is considered valid only if it is correct both syntactically and semantically.  #@NEW_LINE#@#  


              https://doi.org/10.1371/journal.pone.0140866.t004  #@NEW_LINE#@#  


              https://doi.org/10.1371/journal.pone.0140866.t005  #@NEW_LINE#@#  
The percentage of correct output sentences over the total number of requested output sentences, averaged over the four rounds of the cross validation, was 82.4% for the people dataset, 85.3% for the parts of the body dataset, and 95.3% for the categorization dataset.  #@NEW_LINE#@#  The communicative interaction dataset is excluded here because it is not suitable for this type of quantitative evaluation.  #@NEW_LINE#@#  The average percentage of tasks that were performed correctly by the system in the virtual environment over the total number of assigned tasks varies from 83.0% to 100% depending on the number of training examples used in the training stage, as shown in Table 5.  #@NEW_LINE#@#  
In the test related to the communicative interaction dataset, the human interlocutor brought out the system in a conversation similar to the one transcribed in the corpus.  #@NEW_LINE#@#  Fig 9 shows an extract of a side-by-side comparison between the human/ANNABELL-system conversation on one side and child/parent interaction on the other side.  #@NEW_LINE#@#  The complete comparison is reported in S2 Appendix, which also reports the sentences used for the training.  #@NEW_LINE#@#  
The right side is a transcription of a conversation between a 5-years-and-10-months old child and his mother, extracted from the file david.cha of the CHILDES database.  #@NEW_LINE#@#  Note that the human/ANNABELL dialogue system does not use punctuation, which has been added here for clarity.  #@NEW_LINE#@#  


              https://doi.org/10.1371/journal.pone.0140866.g009  #@NEW_LINE#@#  
Fig 10 shows the distributions of the number of tokens in the output sentences of our system and in the child utterances, from the session based on the Warren-Leubecker corpus.  #@NEW_LINE#@#  The total number of tokens used by the child was 134, while those used by the system in this session were 111.  #@NEW_LINE#@#  The total numbers of different token types were 86 and 75, respectively.  #@NEW_LINE#@#  The type/token ratios are close to each other, being 0.64 for the child, and 0.68 for our system (this analysis was performed using the CLAN program [48]).  #@NEW_LINE#@#  


              https://doi.org/10.1371/journal.pone.0140866.g010  #@NEW_LINE#@#  
Fig 11(A) shows how the average time that the system needs to answer a question varies with the number of allocated input connections in the state-action association subnetwork.  #@NEW_LINE#@#  At the end of the whole training process, performed on all five datasets, the average time for an answer, evaluated on a system equipped with a high-performance GPU (graphics processing unit) NVIDIA Kepler GK104 having 1536 cores, is 9.5 seconds.  #@NEW_LINE#@#  
Average time that the system needs to answer a question as a function of the number of allocated connections in the state-action-association subnetwork, evaluated on a CPU system based on a Xeon 2.50 GHz dual-processor-quad-core 16GB RAM, and on a system equipped with a high-performance GPU NVIDIA Kepler GK104 having 1536 cores.  #@NEW_LINE#@#  


              https://doi.org/10.1371/journal.pone.0140866.g011  #@NEW_LINE#@#  
Evaluation_of_the_system_components_and_free-parameters_optimization  #@NEW_LINE#@#  
The STM of the ANNABELL model is organized into different components, as described in Sect.  #@NEW_LINE#@#  Global organization of the model.  #@NEW_LINE#@#  All these components are connected to the central executive, which uses their neural activation states for the decision processes that associate mental actions to the internal states of the system.  #@NEW_LINE#@#  In this section we discuss the relative importance of each component for these decision processes, and the effect of their complete removal from the system.  #@NEW_LINE#@#  It can be observed in Fig 6 that some STM components are essential to the functionality of the system.  #@NEW_LINE#@#  For instance, if the current-word buffer is removed, the signal cannot flow to the word-group buffer and thus it cannot flow to the retrieval structure and to the output buffer, therefore the system cannot work properly.  #@NEW_LINE#@#  On the other hand, if only the connections from the current-word buffer to the central executive are removed, the system can still work, but the current word will not take part in the decision process operated by the central executive.  #@NEW_LINE#@#  Other parts of the system, as the previous-phrases structure and the comparison structure, are not essential to the system functionality, but they are important components of the decision process operated by the central executive.  #@NEW_LINE#@#  
Table 6 shows how the system performance is affected by a removal of the connections from the STM components to the central executive, and how it is affected by a complete removal of each of these components from the system.  #@NEW_LINE#@#  In both cases the removal is done before training.  #@NEW_LINE#@#  The percentage of correct answers is averaged over the three datasets people, parts of the body and categorization, and over the four rounds of the cross validation.  #@NEW_LINE#@#  
The values are averaged over the three datasets people, parts of the body and categorization, and over the four rounds of the cross validation.  #@NEW_LINE#@#  The percentage of correct answers with all components and with all connections is 86.5%.  #@NEW_LINE#@#  


              https://doi.org/10.1371/journal.pone.0140866.t006  #@NEW_LINE#@#  
The contents of the STM components are not independent of each other: there is a redundancy in the information that they provide.  #@NEW_LINE#@#  Therefore, the removal of the connections from a single component to the central executive does not compromise the system functionality completely.  #@NEW_LINE#@#  For instance, if the connections from the current-word buffer to the central executive are removed the decrease in the system performance is relatively small, because the information about the current word is also embedded in the working-phrase buffer and phrase index, which are also connected to the central executive.  #@NEW_LINE#@#  
The previous-phrases structure and the comparison structure are only used to provide an input to the state-action association system, so their complete removal has the same effect as the removal of their connections to the central executive.  #@NEW_LINE#@#  It may be noted that this removal produces a decrease in the percentage of correct answers.  #@NEW_LINE#@#  If the goal structure is completely removed from the system, the processes of insertion and extraction of the phrases in the goal stack will have no effect.  #@NEW_LINE#@#  The system can still work but since it has lost an important feature, its performance will decrease substantially, as shown in Table 6.  #@NEW_LINE#@#  
It can be observed from Fig 6 and from Table 6 that a removal of the comparison structure does not produce a dramatic decrease in the performance.  #@NEW_LINE#@#  However, this fact should not be interpreted as an indication that this component is not important for the system, but rather a consequence of the fact that most sentences in the database are relatively simple.  #@NEW_LINE#@#  The comparison structure has an important role mainly for complex cognitive tasks, while for the simplest question answering tasks the system can get information about word equalities from other components.  #@NEW_LINE#@#  For instance, in the simple question-answering task what is Susan doing?, the word Susan is used as a cue to retrieve sentences as Susan is reading a book from LTM.  #@NEW_LINE#@#  As the cue is necessarily part of the retrieved sentence, there is some redundancy in the information provided by the comparison structure.  #@NEW_LINE#@#  Furthermore, when the system scans the working-phrase buffer, the word in the current-word buffer is always equal to the word of the working phrase corresponding to the phrase index.  #@NEW_LINE#@#  Indeed, the detailed description of the simple categorization task tell me a reptile in S3 Appendix shows that the comparison structure is not necessary for generalization in that case.  #@NEW_LINE#@#  On the other hand, the more complex cognitive task described in the second example of the same appendix could not be accomplished without the support of the comparison structure.  #@NEW_LINE#@#  
The other components of the STM are essential to the functionality of the system, as described in Sect.  #@NEW_LINE#@#  Global organization of the model.  #@NEW_LINE#@#  The system can not work properly if they are completely removed.  #@NEW_LINE#@#  
Fig 12 (A) and 12 (B) show the percentage of correct answers as a function of the parameter Wmax of the DHL rule, used to update the connections from the STM components to the central executive.  #@NEW_LINE#@#  


              https://doi.org/10.1371/journal.pone.0140866.g012  #@NEW_LINE#@#  
Wmax is the weight-saturation value.  #@NEW_LINE#@#  A null value of Wmax has the same effect as a removal of the connections from a STM component to the central executive.  #@NEW_LINE#@#  A variation of Wmax produces a change in the relative weight of the component in the decision process operated by the central executive, as will been shown in S4 Appendix.  #@NEW_LINE#@#  With the exception of the comparison structure, it can be observed from Fig 12(A) and 12(B) that all plots have a maximum in the range 0.5Wmax3, and that the variations of the system performance are relatively small in this range.  #@NEW_LINE#@#  On the other hand, the plot for the comparison structure has a maximum for Wmax5.  #@NEW_LINE#@#  In this work we have used the same value (Wmax = 1) for all STM components, except for the comparison structure, for which we used the optimal value.  #@NEW_LINE#@#  
Fig 12(C) represents the percentage of correct answers as a function of the parameter k used for the k-winner-take-all rule in the state-action-association system.  #@NEW_LINE#@#  It can be observed that this percentage does not change with the value of k. This is related to the fact that the system uses a discrete version of the Hebbian learning rule.  #@NEW_LINE#@#  

Generalization  #@NEW_LINE#@#  
Our study is focused on the children age range between about 3 to 5 years, which is a crucial range for the acquisition of linguistic competencies, and therefore is considered particularly interesting for studies on language development.  #@NEW_LINE#@#  The sentences in the datasets described in Sect.  #@NEW_LINE#@#  The database have been chosen according to the purpose of this work, based on literature on early language assessment [4448].  #@NEW_LINE#@#  For such reason, the grammatical structure of the sentences in the datasets described in Sect.  #@NEW_LINE#@#  The database is relatively simple.  #@NEW_LINE#@#  Nevertheless, it is important to evaluate the generalization abilities of the system on a larger dataset and on more complex grammatical constructions.  #@NEW_LINE#@#  We can distinguish two types of generalization [24]:  #@NEW_LINE#@#  
In the following paragraphs, we evaluate the system performance in two experiments related to these two types of generalization.  #@NEW_LINE#@#  

Generalization_1  #@NEW_LINE#@#  
For this experiment, we built an extended database by replacing the open-class words of the three datasets people, parts of the body and categorization, with new, randomly generated words.  #@NEW_LINE#@#  This extended database was used for testing whether the system, trained on the original database, is able to generalize the acquired knowledge to learned constructions with new open-class words.  #@NEW_LINE#@#  
The declarative sentences of this database were produced by using the constructions shown in Table 1 for the people dataset, the constructions of Table 2 for the parts-of-the-body dataset and the sentences described in Sect.  #@NEW_LINE#@#  The categorization dataset for the categorization dataset; the open-class words within the angle brackets of those constructions have been replaced by randomly generated words, i.e.  #@NEW_LINE#@#  random alphabetical strings.  #@NEW_LINE#@#  The open-class words in the interrogative sentences used for the test were modified accordingly.  #@NEW_LINE#@#  By iterating this procedure, we generated a database of 5352 declarative sentences and 4028 interrogative sentences.  #@NEW_LINE#@#  This database was used as an independent test set for testing the four instances of the system that were trained on the original database during the four rounds of the cross-validation, respectively.  #@NEW_LINE#@#  
Table 7 shows the number of correct answers produced by the four instances of the system over the number of interrogative sentences for the three extended datasets people, parts of the body and categorization.  #@NEW_LINE#@#  The results demonstrate that the system is able to generalize the acquired knowledge to learned constructions with different open-class words.  #@NEW_LINE#@#  
The four instances of the system are the ones obtained by training the system on the original datasets during the four rounds of the cross-validation, respectively.  #@NEW_LINE#@#  


              https://doi.org/10.1371/journal.pone.0140866.t007  #@NEW_LINE#@#  

Generalization_2  #@NEW_LINE#@#  
The compositional generalization capacity of the system was evaluated through an experiment of sentence-to-meaning mapping, based on a task that was developed by Caplan et al.  #@NEW_LINE#@#  [49].  #@NEW_LINE#@#  
In the Caplan task, an aphasic subject listens to sentences and then he is required to indicate the meaning by pointing to images depicting the agent, object and recipient, always in that canonical order.  #@NEW_LINE#@#  
In formal terms, the input is the sequence of words in the sentence, and the output is the sequence agent, object, and recipient, corresponding to a standardized representation of the meaning in terms of thematic role assignment.  #@NEW_LINE#@#  
In our implementation, the surface form of the input sentences is presented word-by-word to the system, which is trained to assign the the thematic roles (predicate, agent, object, recipient) of the open-class words.  #@NEW_LINE#@#  For this experiment we used a dataset of 462 distinct grammatical constructions developed by Hinaut and Dominey [25], who used a context free grammar to generate systematically distinct grammatical constructions, each consisting of between 1 and 6 nouns, with 1 to 2 levels of hierarchical structure (i.e.  #@NEW_LINE#@#  with only a main clause or a main and relative clause, respectively).  #@NEW_LINE#@#  Each grammatical construction of this dataset has a surface form and a coded meaning.  #@NEW_LINE#@#  The surface form is composed by the word groups shown in Table 8.  #@NEW_LINE#@#  
The X represents a closed-class word.  #@NEW_LINE#@#  In case of ambiguities, the system is trained to use the largest groups.  #@NEW_LINE#@#  


              https://doi.org/10.1371/journal.pone.0140866.t008  #@NEW_LINE#@#  
Our model operates in two stages:  #@NEW_LINE#@#  
The architecture of our model does not include a structure where the open-class words can be explicitly mapped to their thematic role.  #@NEW_LINE#@#  In order to perform this task without modifying the system architecture, our approach was to explicitly ask the system for the thematic roles:  #@NEW_LINE#@#  
This approach is more close to the Caplan-task protocol.  #@NEW_LINE#@#  It should also be noted that our model, in contrast to other approaches to the same problem, does not require a prior specification of the distinction between open-class and closed-class words.  #@NEW_LINE#@#  
Following the same approach of Ref.  #@NEW_LINE#@#  [25], the compositional generalization capacity of our model was tested in a ten-fold cross validation.  #@NEW_LINE#@#  The dataset was divided in ten partitions (eight partitions with 46 sentences, and two with 47 sentences).  #@NEW_LINE#@#  In each round of the cross-validation, the system was trained on nine partitions and tested with the one not used for training.  #@NEW_LINE#@#  This procedure was performed ten times, so that all partitions were used for the test.  #@NEW_LINE#@#  Table 9 reports the results of the cross validation.  #@NEW_LINE#@#  Meaning error is the percentage of incorrect thematic role assignment.  #@NEW_LINE#@#  Sentence error is the percentage of sentences in which there is at least one wrong thematic role assignment.  #@NEW_LINE#@#  As illustrated in the table, the cross validation yielded 9.2% average meaning error and 36.7% average sentence error rates.  #@NEW_LINE#@#  The model proposed by Hinaut and Dominey achieved 9.2% average meaning error and 24.4% average sentence error rates through a ten-fold cross validation on the same corpus.  #@NEW_LINE#@#  This means that the number of errors in thematic role assignment is the same, however in their work the assignment errors are concentrated in a smaller number of sentences.  #@NEW_LINE#@#  It should be considered that while that work is focused on the problem of thematic role assignment, our model is not optimized for this specific task, because it addresses a wider range of aspects of human language processing.  #@NEW_LINE#@#  
Meaning error is the percentage of incorrect thematic role assignment.  #@NEW_LINE#@#  Sentence error is the percentage of sentences in which there is at least one wrong thematic role assignment.  #@NEW_LINE#@#  


              https://doi.org/10.1371/journal.pone.0140866.t009  #@NEW_LINE#@#  


Discussion  #@NEW_LINE#@#  
In recent years, there has been a growing interest in the development of different types of conversational agents, ranging from chatterbots to dialog systems for automated online assistance.  #@NEW_LINE#@#  Chatterbot programs try to provide a more or less adequate imitation of how humans conversate, without developing real understanding of language [6, 50].  #@NEW_LINE#@#  Most of them try to bring the human interlocutor into stereotyped conversations, and they largely use the so-called Eliza effect, which is the tendency of people to unconsciously assume computer behaviors are analogous to human behaviors.  #@NEW_LINE#@#  In general, those conversational agents do not model the cognitive processes that sustain language development.  #@NEW_LINE#@#  For this reason, they are not useful for understanding how humans develop language skills and how verbal information is processed in the brain.  #@NEW_LINE#@#  
The connectionist approach has been successfully applied to several aspects of human language cognition and memory.  #@NEW_LINE#@#  However, it has been difficult to build comprehensive neural models able to perform and to control the wide variety of cognitive abilities that are involved in verbal communication [23].  #@NEW_LINE#@#  This difficulty is mainly due to to the lack of a suitable system that controls the flow of information among the STM subsystems.  #@NEW_LINE#@#  We propose that this control can be done by mental actions that operates though neural gating mechanisms.  #@NEW_LINE#@#  This hypothesis is compatible with recent research, which demonstrates that neural gating mechanisms play a fundamental role in the flow of information in the cortex.  #@NEW_LINE#@#  We also provide a model of how the central executive can learn how to associate mental actions to the internal states of the system through a rewarding procedure.  #@NEW_LINE#@#  Our work suggests that those mental actions, which have already been studied in previous working memory models, have also a fundamental role in the development of language skills.  #@NEW_LINE#@#  According to our model, language processing at the sentence level is performed through such kind of mental actions, which are controlled by executive functions.  #@NEW_LINE#@#  The central executive acquires the procedural knowledge for controlling mental actions through rewarding mechanisms, which modify the connections of the state-action association system through the Hebbian learning rule.  #@NEW_LINE#@#  
The proposed architecture is based on a multi-component working memory model, which reflects the functional role of different subsystems, rather than their anatomical location in the brain.  #@NEW_LINE#@#  Nevertheless, the neural-network structure and the use of biologically motivated learning principles make this system suitable for understanding how observed behavior is related to the low level neural processes that occur in the brain and that support it.  #@NEW_LINE#@#  
The results of this work show that the ANNABELL model is able to learn, starting from a tabula rasa condition, how to execute and to coordinate different cognitive tasks, as processing verbal information, storing and retrieving it from long-term memory, directing attention to relevant items and organizing language production.  #@NEW_LINE#@#  The proposed model can help to understand the development of such abilities in the human brain, and the role of reward processes in this development.  #@NEW_LINE#@#  
Several examples in the test show that the ANNABELL system expresses a broad range of capabilities.  #@NEW_LINE#@#  For instance, let us consider the age-comparison example, described in Sect.  #@NEW_LINE#@#  The people dataset, or the question "how many games did you play?"  #@NEW_LINE#@#  in S2 Appendix from the CHILDES database.  #@NEW_LINE#@#  The first example involves counting skills, ability to compare small numbers, ability to associate the words "your friend" to a known person, ability to retrieve information about her age from the LTM, ability to use personal pronouns.  #@NEW_LINE#@#  The system is able to learn how to answer this question through a rewarding procedure, and to generalize the acquired knowledge to similar questions involving different people with different ages.  #@NEW_LINE#@#  In the second example ("how many games did you play?")  #@NEW_LINE#@#  the system is able to retrieve the three games from LTM and to count them.  #@NEW_LINE#@#  It is important to point out that our model does not include a specialized structure for counting, or a specialized structure for number comparison, or a specialized structure for mapping names into personal pronouns.  #@NEW_LINE#@#  All its abilities arise from a relatively small set of mental actions that are compatible with psychological findings.  #@NEW_LINE#@#  
In the past decades, many researchers emphasized the contrast between localist and distributed models.  #@NEW_LINE#@#  A limitation of the current version of the system is that it uses a localist model for word representation.  #@NEW_LINE#@#  In the subnetworks that represent individual words, different words are represented by vectors that are orthogonal to each other.  #@NEW_LINE#@#  This representation limits the ability of the system to learn to recognize similarities among words.  #@NEW_LINE#@#  On the other hand, in general different STM states are not orthogonal to each other.  #@NEW_LINE#@#  For instances, the two questions what is Oliver's favorite sport?  #@NEW_LINE#@#  and what is Susan's favorite movie?  #@NEW_LINE#@#  are represented by subvectors that are close to each other in the subspace associated to the input-phrase buffer, and the system learns to recognize such similarity.  #@NEW_LINE#@#  Another limitation of the localist representation is that it makes the system very sensitive to word position in phrases.  #@NEW_LINE#@#  This problem is partially attenuated by the fact that the system learns to scan the words of the working phrase and to transfer them to the current-word buffer one by one.  #@NEW_LINE#@#  After each step of this scanning procedure, the system has to decide whether or not the current word should be transferred to the focus of attention.  #@NEW_LINE#@#  As the current word itself is part of the input of the state-action association system, this decision process can be partially decoupled from the position of the word in the sentence.  #@NEW_LINE#@#  
The localist representation of words can be regarded as a simplification, mainly motivated by the need for computational efficiency.  #@NEW_LINE#@#  Conversely, the use of a sparse signal representation is a basic feature of our model.  #@NEW_LINE#@#  In principle, our model could be modified to use a distributed (but still sparse) representation of the words.  #@NEW_LINE#@#  The system would have a better ability to recognize similarities (semantical and/or phonological) among words, at the expense of a much greater number of connections and thus a much larger computation time.  #@NEW_LINE#@#  This could be a subject for a future work.  #@NEW_LINE#@#  
It is important to point out that word representation is not a central point of our work, which is more focused on the role of executive functions in language processing at the sentence level.  #@NEW_LINE#@#  The central executive, which is the heart of our system, follows a distributed model, and our work emphasizes that the decision processes operated by this component are not based on pre-coded rules, but statistical.  #@NEW_LINE#@#  
In the context of human-computer interaction, human language understanding is often associated to the ability to translate a linguistic input into a standardized functional form.  #@NEW_LINE#@#  This type of understanding involves the capacity to recognize the thematic role of the open-class words in the surface form of sentences.  #@NEW_LINE#@#  Meaning in this case is interpreted as a mapping from the surface form to the functional form.  #@NEW_LINE#@#  Our model does not have a structure where this mapping is explicit, however its ability to identify thematic roles can be tested through a question-answer approach, as in the Caplan task that was discussed in Sect.  #@NEW_LINE#@#  Generalization 2.  #@NEW_LINE#@#  
The previous notion of understanding is insufficient for the purpose of our work.  #@NEW_LINE#@#  Question answering and, more generally, communicative interactions involve a kind of procedural knowledge, which is used to process the linguistic input and to produce the output.  #@NEW_LINE#@#  This type of understanding refers to the ability to perform the sequences of mental operations that are needed to respond to a verbal input.  #@NEW_LINE#@#  For instance, let us consider the input sentence Tell me about your classmates.  #@NEW_LINE#@#  A response to this sentence requires understanding that the words your classmates refer to a set of individuals, extracting from LTM information about those individuals, selecting part of this information and processing it in a form useful for the output sentences.  #@NEW_LINE#@#  Our work is an attempt to implement a working cognitive model that helps to understand the development of this procedural knowledge.  #@NEW_LINE#@#  
Many researchers argued that a true understanding can not be achieved if language is not grounded in the agent's physical environment through actions and perceptions [51].  #@NEW_LINE#@#  An active field of research is devoted to grounding open-class words to objects (visual elements, bodily sensations and other types of perceptions) and grounding sentences to scenes and actions.  #@NEW_LINE#@#  Morse et al.  #@NEW_LINE#@#  [52], Cangelosi and Schlesinger [53] highlighted the role of embodiment in early language development.  #@NEW_LINE#@#  Dominey and Boucher [54] argued that we learn to translate the surface form of language into a functional form through the integration of speech inputs and non-speech inputs.  #@NEW_LINE#@#  In Baddeley's working memory model, this integration occurs in the episodic buffer.  #@NEW_LINE#@#  A limit of the current version of our model is that language is not grounded.  #@NEW_LINE#@#  Language grounding would require the combination of our model with a visual system, or its embodiment in a larger system that integrates language with other forms of perceptions and actions.  #@NEW_LINE#@#  

Conclusion  #@NEW_LINE#@#  
The results of the validation show that, compared to previous cognitive neural models of language, the ANNABELL model is able to develop a broad range of functionalities, starting from a tabula rasa condition.  #@NEW_LINE#@#  The system processes verbal information through sequences of mental operations that are compatible with psychological findings.  #@NEW_LINE#@#  Those results support the hypothesis that executive functions play a fundamental role for the elaboration of verbal information.  #@NEW_LINE#@#  Our work emphasizes that the decision processes operated by the central executive are not based on pre-coded rules.  #@NEW_LINE#@#  On the contrary, they are statistical decision processes, which are learned by exploration-reward mechanisms.  #@NEW_LINE#@#  The reward is based on Hebbian changes of the learnable connections of the central executive.  #@NEW_LINE#@#  A neural architecture is suitable for modeling the development of the procedural knowledge that determines those decision processes.  #@NEW_LINE#@#  
The current version of the system sets the scene for subsequent experiments on the fluidity of the brain and its robustness in the response to noisy or altered input signals.  #@NEW_LINE#@#  Moreover, the addition of sensorimotor knowledge to the system (e.g.  #@NEW_LINE#@#  visual input and action capabilities) would lead to the extension of the model for handling the developmental stages in the grounding and acquisition of language [52].  #@NEW_LINE#@#  

Supporting_Information  #@NEW_LINE#@#  
S1_Appendix_Examples_from_the_learning_sessions  #@NEW_LINE#@#  
https://doi.org/10.1371/journal.pone.0140866.s001  #@NEW_LINE#@#  
(PDF)  #@NEW_LINE#@#  

S2_Appendix_Example_from_CHILDES_database  #@NEW_LINE#@#  
https://doi.org/10.1371/journal.pone.0140866.s002  #@NEW_LINE#@#  
(PDF)  #@NEW_LINE#@#  

S3_Appendix_Examples_of_neural_activation_patterns  #@NEW_LINE#@#  
https://doi.org/10.1371/journal.pone.0140866.s003  #@NEW_LINE#@#  
(PDF)  #@NEW_LINE#@#  

S4_Appendix_Mathematical_properties_of_the_state-action_association_system  #@NEW_LINE#@#  
https://doi.org/10.1371/journal.pone.0140866.s004  #@NEW_LINE#@#  
(PDF)  #@NEW_LINE#@#  

S5_Appendix_The_ANNABELL_system_architecture  #@NEW_LINE#@#  
https://doi.org/10.1371/journal.pone.0140866.s005  #@NEW_LINE#@#  
(PDF)  #@NEW_LINE#@#  


Acknowledgments  #@NEW_LINE#@#  
This work was partially supported by the Regione Autonoma della Sardegna with funds from Operative Program FSE 20072012 L.R.7/2007 Promozione della ricerca scientifica e dellinnovazione tecnologica in Sardegna.  #@NEW_LINE#@#  Cangelosis efforts were funded as part of the UK EPSRC project BABEL and the FP7 Projects POETICON++.  #@NEW_LINE#@#  We are deeply grateful to Prof. Risto Miikkulainen for his invaluable discussions and suggestions for the improvement of our work.  #@NEW_LINE#@#  

Author_Contributions  #@NEW_LINE#@#  
Conceived and designed the experiments: BG AC GLM.  #@NEW_LINE#@#  Performed the experiments: BG OG GLM.  #@NEW_LINE#@#  Analyzed the data: BG GLM OG.  #@NEW_LINE#@#  Wrote the paper: BG AC GLM OG.  #@NEW_LINE#@#  Designed the software: BG.  #@NEW_LINE#@#  

References  #@NEW_LINE#@#  


