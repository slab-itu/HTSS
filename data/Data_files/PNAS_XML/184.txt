article id="http://dx.doi.org/10.1073/pnas.1510825113"  #@NEW_LINE#@#  
title  #@NEW_LINE#@#  
Parallel computation with molecular-motor-propelled agents in nanofabricated networks  #@NEW_LINE#@#  

Significance  #@NEW_LINE#@#  
Electronic computers are extremely powerful at performing a high number of operations at very high speeds, sequentially.  #@NEW_LINE#@#  However, they struggle with combinatorial tasks that can be solved faster if many operations are performed in parallel.  #@NEW_LINE#@#  Here, we present proof-of-concept of a parallel computer by solving the specific instance {2, 5, 9} of a classical nondeterministic-polynomial-time complete (NP-complete) problem, the subset sum problem.  #@NEW_LINE#@#  The computer consists of a specifically designed, nanostructured network explored by a large number of molecular-motor-driven, protein filaments.  #@NEW_LINE#@#  This system is highly energy efficient, thus avoiding the heating issues limiting electronic computers.  #@NEW_LINE#@#  We discuss the technical advances necessary to solve larger combinatorial problems than existing computation devices, potentially leading to a new way to tackle difficult mathematical problems.  #@NEW_LINE#@#  

Abstract  #@NEW_LINE#@#  
The combinatorial nature of many important mathematical problems, including nondeterministic-polynomial-time (NP)-complete problems, places a severe limitation on the problem size that can be solved with conventional, sequentially operating electronic computers.  #@NEW_LINE#@#  There have been significant efforts in conceiving parallel-computation approaches in the past, for example: DNA computation, quantum computation, and microfluidics-based computation.  #@NEW_LINE#@#  However, these approaches have not proven, so far, to be scalable and practical from a fabrication and operational perspective.  #@NEW_LINE#@#  Here, we report the foundations of an alternative parallel-computation system in which a given combinatorial problem is encoded into a graphical, modular network that is embedded in a nanofabricated planar device.  #@NEW_LINE#@#  Exploring the network in a parallel fashion using a large number of independent, molecular-motor-propelled agents then solves the mathematical problem.  #@NEW_LINE#@#  This approach uses orders of magnitude less energy than conventional computers, thus addressing issues related to power consumption and heat dissipation.  #@NEW_LINE#@#  We provide a proof-of-concept demonstration of such a device by solving, in a parallel fashion, the small instance {2, 5, 9} of the subset sum problem, which is a benchmark NP-complete problem.  #@NEW_LINE#@#  Finally, we discuss the technical advances necessary to make our system scalable with presently available technology.  #@NEW_LINE#@#  

Computation network for the SSP {2, 5, 9}.  #@NEW_LINE#@#  The agents enter the network from the top-left corner.  #@NEW_LINE#@#  Filled circles represent split junctions where it is equally probable that agents continue straight ahead or turn.  #@NEW_LINE#@#  Empty circles represent pass junctions where agents continue straight ahead.  #@NEW_LINE#@#  Moving diagonally down at a split junction corresponds to adding that integer (numbers 2 and 9 for the yellow example path).  #@NEW_LINE#@#  The actual value of the integer potentially added at a split junction is determined by the number of rows of junctions until the next split junction.  #@NEW_LINE#@#  The exit numbers correspond to the target sums T (potential solutions) represented by each exit; correct results for this particular set {2, 5, 9} are labeled in green, and incorrect results (where no agents will arrive) are labeled in magenta.  #@NEW_LINE#@#  The working principle is also detailed in Movie S1.  #@NEW_LINE#@#  
Results  #@NEW_LINE#@#  
In our network encoding of the SSP, the channel-guided unidirectional motions of agents are equivalent to elementary operations of addition, and their spatial positions in the network are equivalent to running sums.  #@NEW_LINE#@#  Starting from an entrance point at one corner of the network (Fig 1, Top Left), agents are guided unidirectionally downward by the channels in vertical or diagonal directions.  #@NEW_LINE#@#  Two types of junctions were designed to regulate the motion of agents in the network: (i) split junctions, where agents are randomly distributed between two forward paths, and (ii) pass junctions, where agents are guided onward to the next junction along the initial direction.  #@NEW_LINE#@#  The vertical distance (measured as the number of junctions) between two subsequent rows of split junctions represents an integer from the set S. The process of an agent moving straight downward from a given split junction is equivalent to excluding the corresponding si from the summation, whereas traveling diagonally downward is equivalent to including that si in the subset sum.  #@NEW_LINE#@#  A solution wi si = TJ to the SSP is represented by an agent choosing a path to one of the exit nodes in the network (bottom row in Fig 1).  #@NEW_LINE#@#  If a sufficiently large number of agents is used, all possible paths are explored, and therefore all possible subset sums of S are generated, simultaneously.  #@NEW_LINE#@#  
We implemented the proposed computational approach with biological agents that satisfy the following requirements: The agents (i) are available in large numbers at negligible cost; (ii) are self-propelled and thus do not require a global, external driving force; (iii) operate independently of each other to ensure parallel exploration; (iv) have small dimensions to enable use in high-density networks with high computing power per unit area; (v) move rapidly to maximize computational speed; and (vi) move in a predominantly forward direction (to ensure low error rates).  #@NEW_LINE#@#  In particular, we used cytoskeletal filaments (actin filaments and microtubules), which are propelled by molecular motors (myosin II and kinesin-1, respectively) along a surface in gliding motility assays (21, 22).  #@NEW_LINE#@#  Both kinds of cytoskeletal filaments have small diameters (10 nm for actin filaments and 25 nm for microtubules) and move at high speeds (510 µm s1 for actin filaments driven by fast myosin II from skeletal muscle, and 0.51 µm s1 for microtubules driven by kinesin-1).  #@NEW_LINE#@#  The filaments are guided unidirectionally (23, 24) along lithographically defined channels, which are functionalized with molecular motors, and whose roofs are open to supply the motors with biochemical fuel (adenosine 5-triphosphate, ATP) by diffusion from the surrounding buffer fluid (25, 26), allowing for a distributed energy supply.  #@NEW_LINE#@#  The width of the channels was set to below 200 nm and 250 nm, for actin filaments and microtubules, respectively, which were observed to reliably guide cytoskeletal filaments (2729).  #@NEW_LINE#@#  
The general layouts of the networks used in our devices for microtubulekinesin- and actinmyosinbased computations are shown in Fig 2 and SI Appendix, Fig S2.1, respectively.  #@NEW_LINE#@#  To start the computation, the filaments are collected from the bulk solution and guided to enter the network through loading zones (large tear-shaped areas in Fig 2 and SI Appendix, Fig S2.1).  #@NEW_LINE#@#  The computational networks comprise a set of standardized rectangular lattices, each containing two isomorphic unit cells representing the split junctions and pass junctions (Fig 2, Inset and SI Appendix, Fig S2.1).  #@NEW_LINE#@#  This standardized structure facilitates the future encoding of problems of any size and the scalability of fabrication, e.g., through step-and-repeat deep-UV lithography, for which the fabrication of channels with widths of 200 nm (as reported here), or below, is readily achievable.  #@NEW_LINE#@#  
To account for different stiffness and size of actin filaments compared with microtubules, we optimized the device design and the junction geometries individually for each filament system with the assistance of numerical modeling and simulation (SI Appendix, section S4).  #@NEW_LINE#@#  After traversing the network, the filaments emerge at exits corresponding to the target sums and are either recycled back to the entrance point (actinmyosin device; SI Appendix, section S2) or collected (microtubulekinesin device; Fig 2).  #@NEW_LINE#@#  The networks were fabricated by electron-beam lithography on SiO2 substrates to obtain the required resolution and fidelity (see Materials and Methods Summary for fabrication details).  #@NEW_LINE#@#  
The minimization of computation errors requires that the error rates of pass junctions are as low as possible, i.e., that filaments do not progress along erroneous paths and emerge at exit nodes not corresponding to target sums (SI Appendix, section S1).  #@NEW_LINE#@#  In contrast, the error rates of split junctions (designed to yield a 50:50 split) are less critical to computational performance because these junctions mainly serve to distribute agents across the network, thus ensuring that no solution is missed.  #@NEW_LINE#@#  Experiments (see Materials and Methods Summary for experimental procedures and imaging details) confirmed that the junction designs in our devices fulfill these performance requirements (Fig 3).  #@NEW_LINE#@#  Fluorescently marked cytoskeletal filaments traversing individual split junctions and pass junctions (Fig 3A) were tracked using fluorescence microscopy (Fig 3B).  #@NEW_LINE#@#  Statistical analysis of the motion of actin filaments and the microtubules showed that 97.9% and 99.7%, respectively, took the correct (straight) paths through pass junctions, whereas split junctions distributed filaments approximately evenly (Fig 3C and SI Appendix, section S5).  #@NEW_LINE#@#  
Our proof-of-concept experiments on the set {2, 5, 9} show that both the actinmyosin system and the microtubulekinesin system can be used to solve a combinatorial problem by parallel computation (Fig 4).  #@NEW_LINE#@#  Superimposed fluorescence micrographs show time-integrated paths of the fluorescently labeled filaments (Fig 4A).  #@NEW_LINE#@#  These images demonstrate that the filaments traversed the network from the entrance point to the exit nodes that represent correct results (Fig 4A, green exit numbers).  #@NEW_LINE#@#  Statistical analysis of the number of filaments leaving each exit (obtained by counting the filaments in image sequences tracking each filament) confirms that both types of agents found all of the correct results and that significantly more agents (P less_than 0.002; unpaired two-tailed t test) of both types exited nodes corresponding to correct results than incorrect results (Fig 4B).  #@NEW_LINE#@#  The experimental data are in good agreement with those obtained by Monte Carlo simulations (Fig 4C and SI Appendix, section S6), which are based on the experimentally measured error rates at each junction type (obtained separately for actin filaments and microtubules; Fig 3C and SI Appendix, section S5).  #@NEW_LINE#@#  

Discussion  #@NEW_LINE#@#  
We developed a parallel-computation approach based on encoding combinatorial problems into the geometry of physical networks.  #@NEW_LINE#@#  We showed that these networks can be manufactured lithographically and explored using independent agents.  #@NEW_LINE#@#  Using such a device, we demonstrated the solution of one particular three-variable instance of the SSP.  #@NEW_LINE#@#  
Notably, once the device is loaded with the required number of agents, the effective computational time for NP-complete problems grows only polynomially, e.g., as N2 if the elements of S are approximately equidistantly spaced.  #@NEW_LINE#@#  This is in contrast to traditional, sequentially operating, electronic computers, where the time required to explore every possible solution sequentially would scale exponentially as 2N.  #@NEW_LINE#@#  However, it is inherent to combinatorial and NP-complete problems (assuming P!  #@NEW_LINE#@#  = NP) that the exploration of the entire solution space requires the use of exponentially increasing amounts of some resource, such as time, space, or material.  #@NEW_LINE#@#  In the present case this fundamental requirement manifests itself in the number of agents needed, which grows exponentially with 2N.  #@NEW_LINE#@#  Effectively we are trading the need of time for the need of molecular mass.  #@NEW_LINE#@#  
The error rates of this first device are too large for scaling up to problems containing more than 10 variables (see SI Appendix, section S1 for a more detailed scaling analysis).  #@NEW_LINE#@#  
Nevertheless, we argue that our approach has the potential to be more scalable in practice than other approaches because it offers several advantages: (i) Myosin II and kinesin-1 molecular motors use a distributed energy supply (ATP in the surrounding solution), thus eliminating the need for external forces (such as pressure or an electric potential) to drive the computation.  #@NEW_LINE#@#  This need inherently prevents, for example, microfluidic approaches from scaling up, because in these devices the pressures needed to pump fluid through the network become prohibitively large for large N (30).  #@NEW_LINE#@#  (ii) The molecular motors operate in a highly energy-efficient manner.  #@NEW_LINE#@#  As a result, the approach demonstrated here consumes orders of magnitude less energy per operation compared with both electronic and microfluidic computers, eliminating issues related to the dissipation of heat.  #@NEW_LINE#@#  Specifically, we estimate an energy cost of 25 × 1014 J per operation for a molecular-motor-based device compared with about 36 × 1010 J per operation for the most advanced electronic computers, or an estimated minimum of 1012 J per operation for microfluidics-based computers (SI Appendix, section S7).  #@NEW_LINE#@#  (iii) The networks in which the problems are encoded in our approach are planar and comprise standardized modules, therefore being fully scalable with existing technology (see SI Appendix, section S1 for a more detailed discussion).  #@NEW_LINE#@#  Thus, they avoid potential engineering challenges associated with building large-scale 3D microfluidics devices.  #@NEW_LINE#@#  
Most importantly, however, we foresee several practical solutions to managing the need for exponentially increasing numbers of agents that we highlighted above.  #@NEW_LINE#@#  (i) The number of agents can self-adjust to the problem size.  #@NEW_LINE#@#  Specifically, cytoskeletal filaments can self-replicate as they traverse the network by enzymatic splitting and simultaneous elongation (31, 32).  #@NEW_LINE#@#  Alternatively, self-propelled, dividing microorganisms can be used as agents (3335).  #@NEW_LINE#@#  Thus, the larger the network, the more the agents will multiply, in an exponential fashion.  #@NEW_LINE#@#  Any kind of agent multiplication scheme will also solve potential problems with sequential feeding of the agents into the network through a single entrance, which represents a bottleneck for large N. Moreover, for cytoskeletal filaments, the splitting and elongation rates will be limited by the global concentrations of enzymes and filament subunits, respectively.  #@NEW_LINE#@#  Thus, multiplication will be negatively regulated in parts of the network where the agent density is high (i.e., above the density needed for successful computation), consequently counteracting the risk of channel clogging.  #@NEW_LINE#@#  (ii) The NP-complete problem is encoded into a planar, physical network and not into the agents themselves.  #@NEW_LINE#@#  This simplifies fabrication and encoding because the network that encodes the problem grows polynomially, whereas the exponentially scaling number of cytoskeletal filaments can be fabricated in bulk.  #@NEW_LINE#@#  This is in contrast to DNA computing, where large amounts of DNA need to be specifically synthesized for each problem.  #@NEW_LINE#@#  Furthermore, because of their generic nature, agents can continue to explore the network as long as ATP is available, which means they can be by recirculated and used more than once (SI Appendix, Fig S2.1).  #@NEW_LINE#@#  (iii) Because our device implements basic addition operations, it can benefit from existing optimized algorithms and can be easily combined with a conventional computer to form a hybrid device.  #@NEW_LINE#@#  For example, an electronic computer could be used to, first, solve a subset of the largest numbers in the SSP.  #@NEW_LINE#@#  Then, the solutions calculated by the computer would be passed on to a set of biological computers described here, drastically reducing the number of agents needed because the biological computer solves only that part of the problem that overwhelms the electronic computer.  #@NEW_LINE#@#  Furthermore, the time needed to feed the filaments into the network would be further reduced because many entrances can be used in parallel.  #@NEW_LINE#@#  An extended analysis of scaling and energy considerations is presented in SI Appendix, sections S1 and S7, respectively.  #@NEW_LINE#@#  
Summarizing, the technical advances that would be necessary for a future device able to challenge an electronic computer are (i) scaling up of the physical network size from currently 100 × 100 µm2 to wafer size, which is achievable by current patterning technology.  #@NEW_LINE#@#  (ii) Reduction of the filament feeding time, which can be achieved by using networks with multiple entrances, or by self-replicating filaments, see above.  #@NEW_LINE#@#  (iii) Reduction of pass-junction error rates.  #@NEW_LINE#@#  We expect that this can be realized by simulation-driven design (such as described in SI Appendix, section S4), by evolutionary algorithms for designing the junction geometries (36, 37), or by using 3D geometries such as bridges or tunnels (38) which would offer zero error rates at pass junctions.  #@NEW_LINE#@#  (iv) To circumvent the inherent difficulties of tracking large numbers of individual filaments, automatic readout schemes at exits of interest can be used (39).  #@NEW_LINE#@#  (v) Programmable devices which can flexibly encode different problems could be achieved by using heat-controlled (40) or electrostatic (41) gates in only one programmable type of junction instead of the two (isomorphic) static junctions.  #@NEW_LINE#@#  (vi) Finally, filaments can be prevented from attaching to or detaching from the network by using closed channels with porous openings for allowing the supply of ATP (42).  #@NEW_LINE#@#  
The potential practical relevance of our approach goes beyond solving SSP, because all NP-complete problems can be converted to one another using a polynomial-time conversion (7, 43) and due to the general nature of our SSP computation network (namely a computer that can perform addition, and, by using right-to-left diagonals, also subtraction).  #@NEW_LINE#@#  Therefore, our approach has the potential to be general and to be developed further to enable the efficient encoding and solving of a wide range of large-scale problems.  #@NEW_LINE#@#  Accomplishing this would move forward (but not remove) the limit of the size of combinatorial problems that can be solved.  #@NEW_LINE#@#  

Materials_and_Methods_Summary  #@NEW_LINE#@#  
Please see the SI Appendix for a detailed description of the materials and methods.  #@NEW_LINE#@#  
Fabrication_of_Computational_Networks_for_Use_with_the_ActinMyosin_System  #@NEW_LINE#@#  
Electron-beam lithography (EBL) was used for pattern formation in a poly(methyl methacrylate) (PMMA) resist on a SiO2-coated Si substrate.  #@NEW_LINE#@#  After development and O2-plasma-ashing [to ensure that the PMMA was hydrophilic and therefore unable to support motility (27)], the sample was silanized with trimethylchlorosilane to promote motility on the floor of the exposed SiO2 substrate (44).  #@NEW_LINE#@#  Wetting of the surface was performed to reduce the possibility of air bubbles forming in the channels (45).  #@NEW_LINE#@#  

Fabrication_of_Computational_Networks_for_Use_with_the_MicrotubuleKinesin_System  #@NEW_LINE#@#  
A silicon wafer was sputter-deposited with Au, sandwiched between two Ti adhesion layers.  #@NEW_LINE#@#  Next, a quartz layer was deposited, followed by a TiW layer and a ZEP520 positive-tone electron-beam resist layer.  #@NEW_LINE#@#  After exposure in an EBL system and development, the TiW, the quartz, and the upper Ti layers were etched by reactive ion etching down to the Au layer.  #@NEW_LINE#@#  Finally, the resist residue and the TiW were removed.  #@NEW_LINE#@#  

ActinMyosin_in_Vitro_Motility_Assays  #@NEW_LINE#@#  
The in vitro motility assays were performed at 2629 °C, as described previously (46).  #@NEW_LINE#@#  Briefly, the flow cell was preincubated with (i) heavy meromyosin (47) (120 µg mL1) for 4 min; (ii) 1 mg mL1 bovine serum albumin for 1 min; (iii) rhodamine-phalloidinlabeled actin (48) filaments (10-nM monomeric concentration) for 1 min.  #@NEW_LINE#@#  The flow cell was washed both before and after actin filament incubation.  #@NEW_LINE#@#  Next, the flow cell was incubated with rigor solution (without ATP) for initial observations.  #@NEW_LINE#@#  Motility was initiated by introducing a MgAdenosine-5-triphosphate (MgATP)-containing assay solution.  #@NEW_LINE#@#  

MicrotubuleKinesin_in_Vitro_Motility_Assays  #@NEW_LINE#@#  
Microtubulekinesin gliding assays were performed using full-length kinesin-1 (kinesin) from Drosophila (49) and rhodamine-labeled tubulin (50) by following a procedure (51) that was upgraded for motility in nanochannels (52).  #@NEW_LINE#@#  The SiO2 surface of the computational chip was passivated with 2-[Methoxy(poly-ethyleneoxy) propyl] trimethoxysilane] to prevent protein binding anywhere except on the gold bottom of the channels.  #@NEW_LINE#@#  Flow cells were perfused with (i) casein-containing solution (0.5 mg ml1, 5 min); (ii) kinesin solution (2 nM, 5 min); and (iii) motility solution containing 1 mM ATP and rhodamine-labeled, taxol-stabilized.  #@NEW_LINE#@#  

Imaging_Methods  #@NEW_LINE#@#  
Rhodamine-labeled cytoskeletal filaments were observed using inverted fluorescence microscopes.  #@NEW_LINE#@#  Images were recorded with electron-multiplying charge-coupled device cameras and analyzed with ImageJ (imagej.nih.gov/ij/).  #@NEW_LINE#@#  Microtubule paths were tracked with software developed in-house (53).  #@NEW_LINE#@#  


Acknowledgments  #@NEW_LINE#@#  
Dan V. Nicolau Jr. thanks Grant Shoffner and Yue Shark Yu from University of California, Berkeley, for help in running stochastic simulations.  #@NEW_LINE#@#  Financially supported by the European Union Seventh Framework Programme (FP7/2007-2011) under Grant Agreements 228971 [Molecular Nano Devices (MONAD)] and 613044 [Parallel computing based on designed networks explored by self-propelled, biological agents (ABACUS)]; Defense Advanced Research Projects Agency under Grant Agreement N66001-03-1-8913; by NanoLund; by the Miller Foundation; by the Swedish Research Council (Projects 621-2010-5146 and 2010-4527); The Carl Trygger Foundation, German Research Foundation within the Cluster of Excellence Center for Advancing Electronics Dresden and the Heisenberg Program; and by Linnaeus University.  #@NEW_LINE#@#  

Footnotes  #@NEW_LINE#@#  




