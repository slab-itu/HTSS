article id="http://dx.doi.org/10.1073/pnas.1423041112"  #@NEW_LINE#@#  
title  #@NEW_LINE#@#  
Synthesis of phylogeny and taxonomy into a comprehensive tree of life  #@NEW_LINE#@#  

Significance  #@NEW_LINE#@#  
Scientists have used gene sequences and morphological data to construct tens of thousands of evolutionary trees that describe the evolutionary history of animals, plants, and microbes.  #@NEW_LINE#@#  This study is the first, to our knowledge, to apply an efficient and automated process for assembling published trees into a complete tree of life.  #@NEW_LINE#@#  This tree and the underlying data are available to browse and download from the Internet, facilitating subsequent analyses that require evolutionary trees.  #@NEW_LINE#@#  The tree can be easily updated with newly published data.  #@NEW_LINE#@#  Our analysis of coverage not only reveals gaps in sampling and naming biodiversity but also further demonstrates that most published phylogenies are not available in digital formats that can be summarized into a tree of life.  #@NEW_LINE#@#  

Abstract  #@NEW_LINE#@#  
Reconstructing the phylogenetic relationships that unite all lineages (the tree of life) is a grand challenge.  #@NEW_LINE#@#  The paucity of homologous character data across disparately related lineages currently renders direct phylogenetic inference untenable.  #@NEW_LINE#@#  To reconstruct a comprehensive tree of life, we therefore synthesized published phylogenies, together with taxonomic classifications for taxa never incorporated into a phylogeny.  #@NEW_LINE#@#  We present a draft tree containing 2.3 million tipsthe Open Tree of Life.  #@NEW_LINE#@#  Realization of this tree required the assembly of two additional community resources: (i) a comprehensive global reference taxonomy and (ii) a database of published phylogenetic trees mapped to this taxonomy.  #@NEW_LINE#@#  Our open source framework facilitates community comment and contribution, enabling the tree to be continuously updated when new phylogenetic and taxonomic data become digitally available.  #@NEW_LINE#@#  Although data coverage and phylogenetic conflict across the Open Tree of Life illuminate gaps in both the underlying data available for phylogenetic reconstruction and the publication of trees as digital objects, the tree provides a compelling starting point for community contribution.  #@NEW_LINE#@#  This comprehensive tree will fuel fundamental research on the nature of biological diversity, ultimately providing up-to-date phylogenies for downstream applications in comparative biology, ecology, conservation biology, climate change, agriculture, and genomics.  #@NEW_LINE#@#  

The Open Tree of Life workflow.  #@NEW_LINE#@#  External taxonomies (and synonym lists) are merged into the Open Tree Taxonomy, OTT.  #@NEW_LINE#@#  Published phylogenies are curated (rooted, and names mapped to OTT) and stored, with full edit history, in a GitHub repository.  #@NEW_LINE#@#  The source trees are decomposed into subproblems, and the loaded along with OTT into a common graph database.  #@NEW_LINE#@#  We traverse the resulting graph and extract a tree of life based on priority of inputs.  #@NEW_LINE#@#  Components with stars indicate the presence of application programming interfaces (APIs) to access data and services.  #@NEW_LINE#@#  
Results  #@NEW_LINE#@#  
Open_Tree_Taxonomy  #@NEW_LINE#@#  
To align phylogenies from different sources, the tips, which may represent different taxonomic levels, must be mapped to a common taxonomic framework (14).  #@NEW_LINE#@#  For synthesizing phylogenetic data, taxonomy also provides completeness and structure where phylogenetic studies have not sampled all known lineages (true of most clades).  #@NEW_LINE#@#  Available taxonomies differ in completeness and how closely the hierarchy matches known evolutionary relationships.  #@NEW_LINE#@#  The Open Tree Taxonomy (OTT) is an automated synthesis of available taxonomies, maximizing the number of taxa and preferring input taxonomies that better align to phylogenetic hypotheses in various clades (Materials and Methods).  #@NEW_LINE#@#  It contains taxa with traditional Linnaean names and unnamed taxa known only from sequence data.  #@NEW_LINE#@#  OTT ver.  #@NEW_LINE#@#  2.8 has 2,722,024 OTUs without descendants and includes 382,564 higher taxa; 585,081 of the names are classified as nonphylogenetic units (e.g., incertae sedis) and were therefore not included in the synthesis pipeline.  #@NEW_LINE#@#  The taxonomy is available for download and through online services, including a taxonomic name resolution service for aligning other trees with our taxonomy (see Data and Software Availability, below).  #@NEW_LINE#@#  

Input_Phylogenies  #@NEW_LINE#@#  
We built a user interface for collection and curation of potential trees for synthesis (https://tree.opentreeoflife.org/curator).  #@NEW_LINE#@#  The complete database contains 6,810 trees from 3,062 studies.  #@NEW_LINE#@#  At the time of publication, 484 studies in our database are incorporated into the draft tree of life.  #@NEW_LINE#@#  Our goal is to generate a best estimate of phylogenetic knowledge; based on our tests, we give several reasons not to use all available trees for synthesis.  #@NEW_LINE#@#  First, including trees that are incorrect does not improve the synthetic estimate.  #@NEW_LINE#@#  In each major clade, expert curators selected and ranked input trees for inclusion based on date of publication, underlying data, and methods of inference (see Materials and Methods for details).  #@NEW_LINE#@#  These rankings generally reflect community consensus about phylogenetic hypotheses.  #@NEW_LINE#@#  Second, including trees that merely confirm, or are subsets of, other analyses only increases computational difficulty without significantly improving the synthetic tree.  #@NEW_LINE#@#  For example, although we have many framework phylogenies spanning angiosperms, we did not include older trees where a newer tree extends the same underlying data.  #@NEW_LINE#@#  Third, inclusion of trees requires a minimum level of curation; where most OTU labels have been mapped to the taxonomic database, the root is correctly identified, and an ingroup clade has been identified.  #@NEW_LINE#@#  This information is not in the input file and requires manual curation from the associated publication.  #@NEW_LINE#@#  Not all trees are sufficiently well-curated; at this point, we have focused curation efforts on trees that will most improve the synthetic tree.  #@NEW_LINE#@#  The full set of trees in the database is important for other questions such as estimating conflict or studying the history of inference in a clade, highlighting the importance of continued deposition and curation of trees into public data repositories.  #@NEW_LINE#@#  See Dataset S1 for a list of input trees and metadata and see Fig S2 for size and scope of input trees.  #@NEW_LINE#@#  

A_Draft_Tree_of_Life  #@NEW_LINE#@#  
We constructed a tree alignment graph (14), the graph of life, by loading the Open Tree Taxonomy and the 484 rooted phylogenies into a neo4j database.  #@NEW_LINE#@#  The graph of life contains 2,339,460 leaf nodes (after excluding nonphylogenetic units from OTT), plus 229,801 internal nodes.  #@NEW_LINE#@#  It preserves conflict among phylogenies and between phylogenies and the taxonomy.  #@NEW_LINE#@#  To create the synthetic tree, we traversed the graph, resolving conflict based on the rank of inputs, and labeled accepted branches that trace a synthetic tree summarizing the source information.  #@NEW_LINE#@#  This method allows for clear communication of how conflicts are resolved through ranking, and of the source trees and/or taxonomies that support a particular resolution.  #@NEW_LINE#@#  The synthetic tree contains phylogenetic structure where we have published trees, and taxonomic structure where we do not.  #@NEW_LINE#@#  See the Supporting Information, including Figs.  #@NEW_LINE#@#  S3S6, for details.  #@NEW_LINE#@#  The tree is available to browse and download, and online services allow extraction of subtrees given lists of species (see Data and Software Availability, below).  #@NEW_LINE#@#  


Discussion  #@NEW_LINE#@#  
Using graph database methods, we combine published phylogenetic data and the Open Tree Taxonomy to produce a first-draft tree of life with 2.3 million tipsthe Open Tree of Life.  #@NEW_LINE#@#  This tree is comprehensive in terms of named species, but it is far from complete in terms of biodiversity or phylogenetic knowledge.  #@NEW_LINE#@#  It does not aim to infer novel phylogenetic relationships, but instead is a summary of published and digitally available phylogenetic knowledge.  #@NEW_LINE#@#  To our knowledge, this study represents the first time a comprehensive tree of life has been available for any analyses that require a phylogeny, even if the species of interest have not been analyzed together in a single, published phylogeny.  #@NEW_LINE#@#  
As a result of data availability, data quality, and conflict resolution, there are many areas where relationships in the tree do not match current phylogenetic thinking (e.g., relationships within Fabaceae, Compositae, Arthropoda).  #@NEW_LINE#@#  This draft tree of life represents an initial step.  #@NEW_LINE#@#  The next step in this community-driven process is for experts to contribute trees and annotate areas of the tree they know best.  #@NEW_LINE#@#  
Limitations_on_Coverage  #@NEW_LINE#@#  
Many microbial eukaryotes, Bacteria, and Archaea are not present in openly available taxonomic databases and therefore were not incorporated into the Open Tree Taxonomy and the synthetic tree.  #@NEW_LINE#@#  Most tips in the synthetic tree (98%) come from taxonomy only, reflecting both the need to incorporate more species into phylogenies and the need to make published phylogenies available.  #@NEW_LINE#@#  We obtained trees from digital repositories and also by contacting authors directly, but our overall success rate was only 16% (9).  #@NEW_LINE#@#  Many published relationships are not represented in the synthetic tree because this knowledge exists only as journal images.  #@NEW_LINE#@#  Our infrastructure allows for the synthetic tree to be easily and continuously updated via updated taxonomies and newly published phylogenies.  #@NEW_LINE#@#  The latter are dependent on authors making tree files available in repositories, such as TreeBASE (17) and Dryad (datadryad.org) or through direct upload to Open Tree of Life (https://tree.opentreeoflife.org/curator), and on having sufficient metadata for trees.  #@NEW_LINE#@#  We hope this synthetic approach will provide incentive for the community to change the way we view phylogeniesas resources to be cataloged in open repositories rather than simply as static images.  #@NEW_LINE#@#  

Conflicts_in_the_Tree_of_Life  #@NEW_LINE#@#  
The synthetic tree of life is a bifurcating phylogeny (with soft polytomies reflecting uncertainty), but some relationships are more accurately described using reticulating networks.  #@NEW_LINE#@#  The Open Tree of Life contains areas with conflict (Fig 3).  #@NEW_LINE#@#  For example, the monophyly of Archaea is contentioussome data-store trees indicate that eukaryotes are embedded within Archaea (18, 19) rather than a separate clade.  #@NEW_LINE#@#  Similarly, multiple resolutions of early diverging animal (2023) and Eukaryotic (2428) lineages have been proposed.  #@NEW_LINE#@#  Reticulations help visualize competing hypotheses, gene tree/species tree conflicts, and underlying processes, such as horizontal gene transfer (HGT), recombination, and hybridization, which have had major impacts throughout the tree of life [e.g., hybridization in diverse clades of green plants (29) and animal lineages (30), including our own (31), and HGT in bacteria and archaea (3234)].  #@NEW_LINE#@#  The graphical synthesis approach used here naturally allows for storage of conflict and nontree-like structure, enabling downstream visualization, analysis, and annotation of conflict (Fig 3) and highlighting the need for additional work in this area.  #@NEW_LINE#@#  
Resolving conflict is a challenge in supertree methods, including our graph method.  #@NEW_LINE#@#  The number of input trees that support a synthetic edge may be considered a reasonable criterion for resolving conflict, but the datasets used to construct each source tree may have overlapping data, making them nonindependent.  #@NEW_LINE#@#  The number of taxa or gene regions involved cannot be used alone without other information to assess the quality of the particular analysis.  #@NEW_LINE#@#  Better methods for resolving conflict require additional metadata about the underlying data and phylogenetic inference methods.  #@NEW_LINE#@#  

Selection_of_Input_Trees  #@NEW_LINE#@#  
We used only a subset of trees in the database for synthesis, filtering out trees that are redundant, are erroneous, or have insufficient metadata.  #@NEW_LINE#@#  Our current synthesis method relies on manual ranking of input trees by expert curators within major clades.  #@NEW_LINE#@#  The potential to automate this ranking, and to use metadata to resolve conflict, depends on the availability of machine-readable metadata for trees; such data currently must be entered manually by curators after reading the publication.  #@NEW_LINE#@#  Additional metadata would allow a comparison of synthesis trees based on, for example, morphological versus molecular data, the inference method, or the number of underlying genes.  #@NEW_LINE#@#  Manual curation is time-consuming and labor-intensive; scalability would improve greatly by having standardized metadata (35) encoded in the files output by inference packages (e.g., in NeXML files) (36).  #@NEW_LINE#@#  

Source_Trees_as_a_Community_Resource  #@NEW_LINE#@#  
The availability of well-curated trees allows for many analyses other than synthesis, such as calculating the increase in information content for a clade over time or by a particular project or laboratory, comparing trees constructed by different approaches, or recording the reduction in conflict in clades over time.  #@NEW_LINE#@#  These analyses require that tips be mapped to a common taxonomy to compare across trees.  #@NEW_LINE#@#  Our database contains thousands of trees mapped to existing taxonomies through the Open Tree Taxonomy.  #@NEW_LINE#@#  The data curation interface is publicly available (https://tree.opentreeoflife.org/curator) as is the underlying data store (https://github.com/opentreeoflife/phylesystem).  #@NEW_LINE#@#  

Dark_Parts_of_the_Tree  #@NEW_LINE#@#  
Hyperdiverse, poorly understood groups, including Fungi, microbial eukaryotes, Bacteria, and Archaea, are not yet well-represented in input taxonomies.  #@NEW_LINE#@#  Our effort also highlights where major research is needed to achieve a better understanding of existing biodiversity.  #@NEW_LINE#@#  Metagenomic studies routinely reveal numerous OTUs that cannot be assigned to named species (37, 38).  #@NEW_LINE#@#  For Archaea and Bacteria, there are additional challenges created by their immense diversity, lack of clarity regarding species concepts, and rampant horizontal gene transfer (HGT) (32, 39, 40).  #@NEW_LINE#@#  The operational unit is often strains (not species), which are not regulated by any taxonomic code; strain collections are not available to download, making it difficult to map taxa between trees and taxonomy and estimate named biodiversity.  #@NEW_LINE#@#  Open databases such as BioProject at the National Center for Biotechnology Information (NCBI) (www.ncbi.nlm.nih.gov/bioproject) have the potential to better catalog biodiversity that does not fit into traditional taxonomic workflows.  #@NEW_LINE#@#  


Materials_and_Methods  #@NEW_LINE#@#  
Input_Data__Taxonomy  #@NEW_LINE#@#  
No single taxonomy both is complete and has a backbone well-informed by phylogenetic studies.  #@NEW_LINE#@#  We therefore constructed the Open Tree Taxonomy (OTT), by merging Index Fungorum (41), SILVA (42, 43), NCBI (44), Global Biodiversity Information Facility (GBIF) (45), Interim Register of Marine and Nonmarine Genera (IRMNG) (46), and two clade-specific resources (47, 48), using a fully documented, repeatable process that includes both generalized merge steps and user-defined patches (Supporting Information).  #@NEW_LINE#@#  OTT (ver.  #@NEW_LINE#@#  2.8.5) consists of 2,722,024 well-named entities and 1,360,819 synonyms, with an additional 585,081 entities having nonbiological or taxonomically incomplete names (environmental samples or incertae sedis), that are not included in the synthetic phylogeny.  #@NEW_LINE#@#  

Input_Data__Phylogenetic_Trees  #@NEW_LINE#@#  
We designed and developed a user interface that saves phylogenetic trees directly into a GitHub repository (49) and used this interface to import and curate trees.  #@NEW_LINE#@#  We obtained published trees from TreeBASE (17) and Dryad and by direct appeal to authors.  #@NEW_LINE#@#  The data retrieved are by no means a complete representation of phylogenetic knowledge because we obtained digital phylogeny files for only 16% of recently published trees (9).  #@NEW_LINE#@#  Even when available (as newick, NEXUS, or NeXML files or via TreeBASE import), trees require significant curation to be usable for synthesis.  #@NEW_LINE#@#  We mapped taxon labels (which often include laboratory codes or abbreviations) to taxonomic entities in OTT.  #@NEW_LINE#@#  We rooted (or rerooted) trees to match figures from papers.  #@NEW_LINE#@#  Because relationships among outgroup taxa were often problematic, we identified the ingroup/focal clade for the study.  #@NEW_LINE#@#  For studies with multiple trees, we tagged the tree that best matched the conclusions of the study as preferred.  #@NEW_LINE#@#  Then, within major taxonomic groups (eukaryotic microbial clades, animals, plants, and fungi), we ranked preferred trees to generate prioritized lists.  #@NEW_LINE#@#  In the absence of structured metadata about the phylogenetic methods and data used to infer the input trees, rankings were assembled by authors with expertise in specific clades and were based on date of publication, taxon sampling, the number of genes/characters in the alignment, whether the specific genomic regions are known to be problematic, support values, and phylogenetic reliability (agreement or disagreement with well-established relationships) (see Table 2 for details).  #@NEW_LINE#@#  In general, rankings reflect community consensus about phylogenetic hypotheses.  #@NEW_LINE#@#  As we collect more metadatasuch as that described by the Minimum Information for a Phylogenetic Analysis (MIAPA) (35), either by manual entry into the system or by upload of tree files with structured, machine-readable metadataautomated filtering/weighting trees based on metadata will be possible.  #@NEW_LINE#@#  

Synthesis  #@NEW_LINE#@#  
The goal of the supertree (or synthesis) operation is to summarize the ranked input trees and taxonomy (with the taxonomy given the lowest rank).  #@NEW_LINE#@#  We used an algorithmic approach to produce the synthetic tree rather than a search through tree space for an optimal tree.  #@NEW_LINE#@#  Given a set of edges labeled with the ranks of supporting trees, the algorithm is a greedy heuristic that tries to maximize the sum of the ranks of the included edges.  #@NEW_LINE#@#  We summarize the major steps of the method here and provide details in the Supporting Information.  #@NEW_LINE#@#  
The first steps include preprocessing the inputs.  #@NEW_LINE#@#  We pruned nonbiological or taxonomically incomplete names from OTT and pruned outgroups and unmapped taxa from input trees.  #@NEW_LINE#@#  Removal of outgroups reduces errors from unexpected relationships among outgroup taxa.  #@NEW_LINE#@#  Finally, we found uncontested nodes across the taxonomy plus input trees and broke the inputs at these nodes into a set of subproblems.  #@NEW_LINE#@#  This divide-and-conquer approach shortened running time and reduced memory requirements.  #@NEW_LINE#@#  
We then built a tree alignment graph (14, 50), which we refer to as the graph of life.  #@NEW_LINE#@#  Tree alignment graphs allow for representation of both congruence and conflict in the same data structure, allow for nonoverlapping taxon sets in the inputs (as well as tips mapped to higher taxa), and are computationally tractable at the scale of 2.3 million tips and hundreds of input trees.  #@NEW_LINE#@#  We loaded the taxonomy nodes and edges into the graph, and then each subproblem, creating new nodes and edges and mapping tree nodes onto compatible taxonomy nodes.  #@NEW_LINE#@#  We also created new nodes and edges that reflect potential paths between the inputs.  #@NEW_LINE#@#  
Once the graph was complete, generating the synthetic tree involved traversing the graph and preferring edges that originate from high-ranked inputs.  #@NEW_LINE#@#  We always preferred phylogeny edges over taxonomy edges.  #@NEW_LINE#@#  Given additional digitized metadata about trees, this system allows for custom synthesis procedures based on preference for inference methods, data types, or other factors.  #@NEW_LINE#@#  
As a comparison with this rank-based analysis, we also created a synthetic tree using MultiLevelSupertrees (MLS) (15), a supertree method where the tips in the source trees can represent different taxonomic hierarchies.  #@NEW_LINE#@#  We built MLS supertrees for the largest clades that were computationally feasible and then used these nonoverlapping trees as input into the graph database and conducted synthesis.  #@NEW_LINE#@#  Due to the lack of taxon overlap between each MLS tree, there was no topological conflict, and creating the final MLS supertree simply involved traversing the graph and preferring phylogeny over taxonomy.  #@NEW_LINE#@#  

Data_and_Software_Availability  #@NEW_LINE#@#  
The current version of the tree of life is available for browse, comment, and download at https://tree.opentreeoflife.org.  #@NEW_LINE#@#  All software is open source and available at https://github.com/opentreeoflife.  #@NEW_LINE#@#  The tree data store is available at https://github.com/opentreeoflife/phylesystem.  #@NEW_LINE#@#  Where not limited by preexisting terms of use, all data are published with a CC0 copyright waiver.  #@NEW_LINE#@#  The Open Tree of Life taxonomy, the synthetic tree and processed inputs are available from Dryad (dx.doi.org/10.5061/dryad.8j60q).  #@NEW_LINE#@#  


Introduction  #@NEW_LINE#@#  
This document contains detail about the construction of the composite taxonomy, curation of input trees, creation of the synthesis tree, and conflict analyses.  #@NEW_LINE#@#  Fig S1 gives an overview of the Open Tree of Life process, data stores, and services.  #@NEW_LINE#@#  Constructing the draft tree involved two different types of inputs: taxonomies and published phylogenies.  #@NEW_LINE#@#  We first combined multiple taxonomic hierarchies into a single taxonomy, the Open Tree Taxonomy (OTT).  #@NEW_LINE#@#  In a web application built specifically for this project, we input and curated published phylogenies that were then saved to a public GitHub repository.  #@NEW_LINE#@#  
We loaded OTT into a neo4j graph database, creating an initial set of nodes and edges.  #@NEW_LINE#@#  Then, to reduce computational complexity, we decomposed the tree inputs into independent subproblems based on nodes that are uncontested across inputs.  #@NEW_LINE#@#  These subproblems were then loaded into the database, creating a tree alignment graph.  #@NEW_LINE#@#  Using this data structure, which contains information for all inputs, we extracted a tree by resolving conflicts based on a ranked list of inputs, where trees are ranked higher than taxonomy.  #@NEW_LINE#@#  
Once we had a draft trees, we assessed conflict and compared resolution between the synthetic tree, the taxonomy, and the set of input trees.  #@NEW_LINE#@#  

Constructing_a_Composite_Taxonomy  #@NEW_LINE#@#  
The synthesis of the OpenTree Taxonomy (version 2.8 used here) is a fully automated process.  #@NEW_LINE#@#  The pipeline takes taxonomy database inputs: in this case, Index Fungorum (41), SILVA (42, 43), NCBI Taxonomy (44), GBIF (45), IRMNG (46), and two clade-specific resources (47, 48).  #@NEW_LINE#@#  Source taxonomies, each of which is published in its own idiosyncratic representation, are first preprocessed to convert them to a common format.  #@NEW_LINE#@#  Each source taxonomy in turn is then merged into developing a union taxonomy.  #@NEW_LINE#@#  Merging a source taxonomy into the union taxonomy consists of two steps: aligning source nodes to union nodes to resolve homonyms, followed by transferring unaligned (new) nodes into the union.  #@NEW_LINE#@#  A set of about 300 scripted ad hoc manipulations fix errors in the input taxonomies and address situations where automatic alignment has failed.  #@NEW_LINE#@#  Because the process is scripted, it can be executed any time one of the input taxonomies is revised.  #@NEW_LINE#@#  The source code for this process is available at https://github.com/OpenTreeOfLife/reference-taxonomy.  #@NEW_LINE#@#  Version 2.8 of the OpenTree Taxonomy consists of 3,307,105 names, of which 2,722,024 are external (tips) and 585,081 are internal.  #@NEW_LINE#@#  The taxonomy also has 1,360,819 synonyms.  #@NEW_LINE#@#  Each name is given a unique id (OTT id) that is used for mapping taxa in trees.  #@NEW_LINE#@#  The produced taxonomy is then ingested into a neo4j graph database managed by the taxomachine software (https://github.com/OpenTreeOfLife/taxomachine).  #@NEW_LINE#@#  Taxomachine serves the taxonomy with representational state transfer (REST) calls over a network and provides a taxonomic name resolution service that allows for disambiguation of taxonomic names as a result of misspellings, changed classification, or homonyms.  #@NEW_LINE#@#  Taxomachine returns the unique OpenTree taxonomy id for each name in a taxonomic name resolution call.  #@NEW_LINE#@#  

Curating_Input_Trees  #@NEW_LINE#@#  
We developed a git-based datastore for phylogenies (49) that connects a web interface (https://tree.opentreeoflife.org/curator) through a programming interface to a GitHub repository (https://github.com/opentreeoflife/phylesystem).  #@NEW_LINE#@#  The phylogenies in our datastore come from automated import from TreeBASE, input of downloaded files from Dryad, journal supplementary material, and contacting authors directly for files.  #@NEW_LINE#@#  At the time of synthesis, the datastore contained 6,753 trees from 3,040 studies (see Fig S2 for distribution of data) although only 484 of these trees are included in this version of the synthetic tree.  #@NEW_LINE#@#  Studies contained information about the publication, trees and the list of taxa included.  #@NEW_LINE#@#  In all cases, the original tree files did not contain sufficient annotation and metadata for synthesis so there was significant curation by experts.  #@NEW_LINE#@#  Curation involved two major steps.  #@NEW_LINE#@#  First, curators mapped the tip labels in the trees to entities in taxonomic databases, assigning an OTT id and disambiguating any problems due to homonyms.  #@NEW_LINE#@#  Tip labels may be mapped to alternate taxonomic levels (e.g., species, genus, etc.).  #@NEW_LINE#@#  Second, curators checked that the tree rooting was correct, that the ingroup was identified, and that the tree matched the figures in the publication (tree files deposited in TreeBASE and Dryad often differ from what is shown in the original publication).  #@NEW_LINE#@#  Ingroups needed to be specified because often the rooting of the outgroup is not accurate, and, therefore, relationships in the outgroups may be poor.  #@NEW_LINE#@#  Once curated, studies were then stored in the phylesystem GitHub repository as NexSON files [(NeXML) (36) serialized as javascript object notation].  #@NEW_LINE#@#  More information about NeXSON can be found at purl.org/opentree/nexson.  #@NEW_LINE#@#  

Overview_of_Synthesis_Method  #@NEW_LINE#@#  
The goal of the supertree (or synthesis) operation is to summarize the input trees and taxonomy.  #@NEW_LINE#@#  We used an algorithmic approach to produce the synthetic tree rather than a search through tree space for an optimal tree.  #@NEW_LINE#@#  However, one can think of the algorithm as a heuristic attempt to find a tree that maximizes a number of highly ranked groups displayed criterion and minimizes unsupported groups.  #@NEW_LINE#@#  We used a ranking of input trees determined by domain experts to weight groupings.  #@NEW_LINE#@#  
Definitions  #@NEW_LINE#@#  

Comparison_with_Previous_Work  #@NEW_LINE#@#  
We have modified the procedure described in Smith et al.  #@NEW_LINE#@#  (14) to remove the dependence on the order of the inputs, reduce the number of introduced edges that cannot be directly tied to an input tree or taxonomy, improve computational efficiency, and also improve the ability to accept better resolved clades from lower ranked trees.  #@NEW_LINE#@#  Our definition of TAGs differs from that described by Chaudhary et al.  #@NEW_LINE#@#  (50).  #@NEW_LINE#@#  We have steps to create additional nodes and edges to ensure high levels of overlap among compatible input trees, which facilitates more effective synthesis because it enables subtrees from input trees to be grafted onto one another in more possible ways.  #@NEW_LINE#@#  


Source_Tree_Preprocessing  #@NEW_LINE#@#  
There are four preprocessing steps that we performed on the input trees and taxonomy before decomposing the inputs into subproblems.  #@NEW_LINE#@#  We used the treemachine software (https://github.com/OpenTreeOfLife/treemachine) for steps 13 and the otc-prune-taxonomy tool from the C++ library otcetera (https://github.com/OpenTreeOfLife/otcetera) for step 4.  #@NEW_LINE#@#  
Step_1__Prune_OTT_Down_to_Taxonomy_for_Synthesis  #@NEW_LINE#@#  
Some taxa in the full OTT were flagged as being questionable (major_rank_conflict, major_rank_conflict_direct, major_rank_conflict_inherited, environmental, unclassified_inherited, unclassified_direct, viral, barren, not_otu, incertae_sedis, incertae_sedis_inherited, extinct_inherited, extinct_direct, hidden, and unclassified).  #@NEW_LINE#@#  These questionable taxa were pruned from the taxonomy to produce a taxonomic tree for synthesis.  #@NEW_LINE#@#  This taxonomic input to synthesis has 2,339,460 terminal taxa, which we refer to as the taxonomy tree.  #@NEW_LINE#@#  

Step_2__Restrict_Input_Phylogenetic_Estimates_to_the_Ingroup  #@NEW_LINE#@#  
The synthetic tree requires rooted trees, and the position of the root within the outgroup is often uncertain.  #@NEW_LINE#@#  As part of tree curation, we asked curators to designate an ingroup node, whose descendants are considered part of the trees ingroup.  #@NEW_LINE#@#  When loading the trees, we read in only the ingroup taxa, effectively pruning the outgroup.  #@NEW_LINE#@#  Pruning the outgroup reduces errors due to poor taxonomic representation biasing outgroup relationships, and also from the incorrect placement of the root within the outgroup.  #@NEW_LINE#@#  

Step_3__Prune_Tree_Tips_with_Missing__Ambiguous__or_Nested_OTT_Mappings  #@NEW_LINE#@#  
Not every curated phylogenetic tree estimate has OTUs that are mapped in a manner that is consistent with a clear phylogenetic interpretation.  #@NEW_LINE#@#  To minimize ambiguity, we first required tips in input trees to be associated with OTT taxa; any tips that were not mapped to OTT taxa were pruned.  #@NEW_LINE#@#  In cases where multiple tips were mapped to the same OTT taxon (for example, population-level sampling), we kept the first encountered tip as an exemplar and pruned all others.  #@NEW_LINE#@#  Finally, when a single tree contained nested mappingsone tip mapped to a genus and another tip mapped to a species in that genuswe used the more nested mapping (e.g., the species rather than the genus) and omitted the other mappings.  #@NEW_LINE#@#  
The postprocessed trees are available at files.opentreeoflife.org/preprocessed/v3.0/.  #@NEW_LINE#@#  

Step_4__Prune_the_Taxonomy_to_Taxa_Required_by_Phylogenetic_Inputs  #@NEW_LINE#@#  
Only a small subset of taxa from the OTT taxonomy are mapped to tips of any of the input phylogenetic trees.  #@NEW_LINE#@#  The 37,325 terminal taxa are mapped to leaves in the input phylogenetic trees, and 4,254 nonterminal taxa are mapped to tips of at least one input phylogenetic tree.  #@NEW_LINE#@#  
If a terminal taxon in OTT occurs only in the taxonomic tree, then the taxons final placement in the synthetic tree can be determined using the taxonomy.  #@NEW_LINE#@#  We pruned the taxonomy down to this backbone set of taxa and used this pruned taxonomy for constructing subproblems that can be solved individually.  #@NEW_LINE#@#  The pruning step decreases the runtime and memory use of the subsequent decomposition into subproblems.  #@NEW_LINE#@#  These subproblems comprise a subset of the leaves found in OTT but include any terminal taxa for which the phylogenetic inputs provide phylogenetic hypotheses.  #@NEW_LINE#@#  If a tip of a phylogenetic input is mapped to a nonterminal taxon, then all of the descendants of that taxon are retained when we perform this pruning of the taxonomy.  #@NEW_LINE#@#  The number of tips in the pruned taxonomy was 127,889, rather than 2,339,460 tips in the portion of OTT used for synthesis.  #@NEW_LINE#@#  
For archiving, the pruned taxonomy is posted at phylo.bio.ku.edu/ot/synth-v3-pruned-taxonomy.tre (see https://github.com/OpenTreeOfLife/otcetera/blob/master/supertree/README.md for instructions on how to regenerate it).  #@NEW_LINE#@#  


Decomposition_into_Subproblems  #@NEW_LINE#@#  
We adopted a divide-and-conquer approach for synthesis to shorten running time and reduce memory requirements.  #@NEW_LINE#@#  The divide step is performed by the otc-uncontested-decompose tool from otcetera.  #@NEW_LINE#@#  This divide step creates a subproblem for each OTT taxon that is not contested by any input tree.  #@NEW_LINE#@#  We use the -r command-line flag to otc-uncontested-decompose so that any tip that is mapped to a contested taxon is retained in the input tree (the default behavior is to delete such tips).  #@NEW_LINE#@#  
We define a contested taxon as follows: Consider a taxon (i.e., a clade recognized by taxonomy) It|Ot (using the notation ingroup | outgroup) and a fully resolved phylogenetic tree, f. We say that f contests the taxon if the most recent common ancestor (mrca) of the tips of f that are mapped to the ingroup, It, is also the ancestor of some tips that are mapped to members of the outgroup, Ot.  #@NEW_LINE#@#  In other words, f has at least one grouping that is incompatible with the taxon.  #@NEW_LINE#@#  An unresolved tree, g, contests the taxon if every fully resolved version of g contests the taxon.  #@NEW_LINE#@#  If no input tree contests a nonterminal taxon, we refer to it as an uncontested taxon.  #@NEW_LINE#@#  
The root node of each subproblem is guaranteed to exist in the final supertree; so the divide step creates constraints on the output.  #@NEW_LINE#@#  Finding uncontested taxa is easy, and constraining these groups to be monophyletic improves the interpretability of the supertree as a summary of the input trees.  #@NEW_LINE#@#  The decision to constrain uncontested taxa to be present in the supertree can reduce the total number of groups from input trees that are displayed by the supertree.  #@NEW_LINE#@#  This reduction can happen because some cases of conflict with the taxonomy arise only through the interaction of multiple input trees.  #@NEW_LINE#@#  
After identifying uncontested taxa, we then generate the set of subproblems.  #@NEW_LINE#@#  Conceptually, this process can be thought of as slicing each of the inputs into fragments of trees, partitioning the fragments into the appropriate subproblem.  #@NEW_LINE#@#  The tips of the subproblems are mapped either to terminal taxa, to other uncontested taxa, or to a contested taxon that is mapped to one of the tips of a phylogenetic input.  #@NEW_LINE#@#  Each uncontested taxon is the root of exactly one subproblem.  #@NEW_LINE#@#  Each uncontested taxon other than the root occurs as a leaf label in exactly one subproblem: the subproblem associated with its least inclusive ancestor that is uncontested.  #@NEW_LINE#@#  
The details of how the subproblems are created are described in otceteras documentation.  #@NEW_LINE#@#  The following procedure is not the exact algorithm used but provides a simple explanation that would lead to the same set of subproblems: This procedure of slicing a tree is applied to each input phylogenetic tree (output of preprocessing step 3):  #@NEW_LINE#@#  
Fig S3 shows an example of this process of decorating two input trees with the taxonomic definitions from a taxonomy.  #@NEW_LINE#@#  In that figure, there are five subproblems, corresponding to the five uncontested (blue) nodes.  #@NEW_LINE#@#  Each subproblem consists of the nodes from OTT and input trees descended from the uncontested node.  #@NEW_LINE#@#  
The decomposition procedure then acts by cutting each tree at the uncontested nodes and grouping the resulting fragments by the label of the taxon at the root/breakpoint.  #@NEW_LINE#@#  The results of the decomposition are shown in Fig S4.  #@NEW_LINE#@#  Note that not all input trees need be represented within a subproblem.  #@NEW_LINE#@#  Many of the phylogenetic statements in the subproblems are trivial (the trees lack any internal, nonroot nodes).  #@NEW_LINE#@#  These trivial statements are retained to make it possible to keep track of which input trees span parts of the synthetic tree.  #@NEW_LINE#@#  
For the taxonomy and input trees used in this version of the synthetic tree, there are 2,792 nontrivial subproblems with between 1 and 15 tree fragments (every subproblem contains a taxonomy fragment).  #@NEW_LINE#@#  

Constructing_the_Tree_Alignment_Graph  #@NEW_LINE#@#  
Overview_of_TAG_Construction  #@NEW_LINE#@#  
The tree alignment graph (TAG) is a multigraph whose edges are labeled with the source information (input tree or taxonomy).  #@NEW_LINE#@#  Constructing the TAG takes place in two stages: (i) Construct a unigraph with the same nodes as the TAG, which well call the scaffold, and (ii) extract the TAG from the scaffold by selecting and labeling edges from it.  #@NEW_LINE#@#  
We load the taxonomy and the subproblems into the scaffold, creating nodes and directed edges representing phylogenetic information.  #@NEW_LINE#@#  The loading process begins with the taxonomy, creating a scaffold node for every OTT taxon.  #@NEW_LINE#@#  Then we process each subproblem from the decomposition step.  #@NEW_LINE#@#  The loading and synthesis procedures are done on each subproblem separately although all nodes and edges are stored within a single neo4j graph database.  #@NEW_LINE#@#  In subsequent sections on TAG construction, input trees refers to the tree fragments in each subproblem, excluding the taxonomic trees.  #@NEW_LINE#@#  
During the creation of nodes for each subproblem, we do not create redundant nodes (nodes with identical ingroup and outgroup properties).  #@NEW_LINE#@#  Much of the complexity of creating the TAG arises from the fact that the input trees only partially overlap with each other in terms of taxonomic content.  #@NEW_LINE#@#  A single node in an input tree may be represented by a large set of nodes in the TAG even though the TAG does not contain redundant nodes.  #@NEW_LINE#@#  However, there may be many nodes in the TAG that have the same ingroup/outgroup properties as an input tree node when the TAG nodes taxonomic composition is restricted to the taxon set of the input tree.  #@NEW_LINE#@#  The loading of input phylogenetic trees includes steps that consider many ways that overlapping trees can overlap and interdigitate.  #@NEW_LINE#@#  Fig S5 illustrates the steps involved in TAG creation.  #@NEW_LINE#@#  

Definitions  #@NEW_LINE#@#  
The following definitions are used throughout the TAG creation and synthesis text.  #@NEW_LINE#@#  

Initializing_the_Scaffold_with_the_Taxonomy  #@NEW_LINE#@#  
We initialize the scaffold data structure by first loading the taxonomy tree from step 1 of the preprocessing, adding a node to the scaffold for each node in the taxonomy.  #@NEW_LINE#@#  The initial set of edges in the scaffold is the set of edges from the taxonomy (if node v in the scaffold represents taxon t, an edge will be created to connect v to the node that represents the parent taxon of t).  #@NEW_LINE#@#  This set of nodes is added to the scaffold before any of the subproblems are processed.  #@NEW_LINE#@#  

Loading_the_Subproblems  #@NEW_LINE#@#  
Next, we perform the loading procedure on each subproblem independently.  #@NEW_LINE#@#  Each subproblem contains a set of trees (including a subtree induced from the taxonomy) that span the taxonomic region between the uncontested taxon at the root of the given subproblem and those uncontested taxa at the roots of other subproblems.  #@NEW_LINE#@#  As each subproblem is loaded, the corresponding taxonomic region is populated with nodes and edges representing the nodes and edges of the subproblems input trees.  #@NEW_LINE#@#  Below, we discuss the procedures involved in loading and synthesizing each subproblem itself.  #@NEW_LINE#@#  

Adding_Nodes_for_Each_Input_Tree_Node  #@NEW_LINE#@#  
The first step taken when loading a subproblem is to create nodes and edges in the scaffold such that every node and edge in an input tree is represented by a node or edge in the scaffold.  #@NEW_LINE#@#  We skip the taxonomy subtree when loading each subproblem because those nodes and edges are already in the scaffold.  #@NEW_LINE#@#  We also skip trivial trees from an input.  #@NEW_LINE#@#  For example, if an input tree has only one or two leaves in a subproblem, the group does not add any new nodes.  #@NEW_LINE#@#  We refer to the set of nodes added in this initial step as R.  #@NEW_LINE#@#  

Merging_Nodes_Across_Input_Trees  #@NEW_LINE#@#  
Because of the partially overlapping taxonomic sets of the input trees, a node in the optimal supertree might result in multiple different combinations of ingroup/outgroup properties when restricted to the taxonomic set of different input trees.  #@NEW_LINE#@#  To allow for the possibility that nodes in two different input trees represent the same node in the optimal subtree, we create a set of additional nodes for some of the merge-compatible node pairs in R.  #@NEW_LINE#@#  
We consider adding a merger node, d, for each pair of merge-compatible nodes, p and q, where p and q must originate from different input trees.  #@NEW_LINE#@#  The ingroup property of d is the union of the ingroup properties of p and q.  #@NEW_LINE#@#  Similarly, the outgroup of d is the union of the outgroup properties of p and q. Node d represents the possibility that the input tree nodes associated with p and q represent different views of the same node in the synthetic tree of life.  #@NEW_LINE#@#  
Note that any pair of nodes in R that derived from trees with disjunct taxonomic leaf sets could generate a valid merger node.  #@NEW_LINE#@#  However, creating all merger nodes would result in a huge number of new nodes.  #@NEW_LINE#@#  Therefore, we create new merger nodes only when the pair of nodes have at least one ingroup taxon in common.  #@NEW_LINE#@#  

Adding_Nodes_by_Walking_Paths_in_the_Scaffold  #@NEW_LINE#@#  
In the merger nodes step, we created only a small subset of the possible set of nodes that can be created by combining nodes from input trees.  #@NEW_LINE#@#  In the WalkPaths procedure, we considered another way of combining nodes and used it to add more nodes to the scaffold.  #@NEW_LINE#@#  Let E be the set of nodes created for this subproblem thus far.  #@NEW_LINE#@#  E is the union of R (the nodes coming directly from input trees), B (the set of nodes added by merging root nodes of input trees), and D (the set of nodes added by merging nonroot nodes).  #@NEW_LINE#@#  
The nodes created in the previous subproblem-specific sections (the members of the sets R, B, and D) have ingroup and outgroup properties that each reflect either one or two input trees.  #@NEW_LINE#@#  Members of R represent nodes in single trees.  #@NEW_LINE#@#  Members of B were created by merger of root nodes from one tree with a node of a different tree.  #@NEW_LINE#@#  So, E is not exhaustive in the sense that the ingroup+outgroup properties of all of the nodes in the optimal summary for this subproblem may not be represented.  #@NEW_LINE#@#  
To consider a wider range of possible internal nodes in the subproblem solution, the next step creates nodes with the ingroup+outgroup properties that would be obtained by walking a path connecting elements in E. The WalkPaths procedure considers possible paths through these nodes and produces accumulation nodes for the path.  #@NEW_LINE#@#  Each accumulation node is produced by a node, x, along the path.  #@NEW_LINE#@#  The ingroup property of the accumulation node will be the union of the ingroup properties of x and all of the previous nodes in the path.  #@NEW_LINE#@#  The outgroup property of the accumulation node will be the union of the outgroup properties of x and all of the subsequent nodes in the path.  #@NEW_LINE#@#  
A scaffold node can be proposed if the next node in a path is compatible with the accumulated ingroup property that has been built while traversing the path up to that point.  #@NEW_LINE#@#  
The WalkPaths procedure starts at each node in E and tries to extend that path to a new node consistent with the requirements that (i) each node in the path is the nested child of the next node, and (ii) each nodes outgroup has no overlap with the cumulative ingroup of the previous nodes in the path.  #@NEW_LINE#@#  
An accumulation node is created for each node in a valid path that has been extended to more than one node.  #@NEW_LINE#@#  
Three kinds of edges are added to the scaffold with the introduction of each accumulation node c: (i) Because c derives from path node x, we duplicate the edges going in and out of x, just as we did for merger nodes; (ii) edges are created between c and every node in the path containing x (other than x); and (iii) edges are also created between c and every other upstream and downstream accumulation node in its path.  #@NEW_LINE#@#  

Deriving_the_TAG_from_the_Scaffold  #@NEW_LINE#@#  
With the completion of the scaffold, it is possible to say what the TAG is.  #@NEW_LINE#@#  The nodes of the TAG are simply the nodes of the scaffold, and every edge of the TAG represents a nestedchildof relationship between two nodes that is present as an edge in the scaffold.  #@NEW_LINE#@#  For synthesis purposes it is important to know which input tree is associated with each edge in the TAG, so every edge in the TAG is labeled with the associated tree and the corresponding edge in the input tree.  #@NEW_LINE#@#  Scaffold edges that cannot be associated with input trees are not added to the TAG.  #@NEW_LINE#@#  Because there can be many trees associated with a single scaffold edge, the TAG is a multigraph.  #@NEW_LINE#@#  The TAG will have an edge (v, w) labeled with tree t and edge (x, y) if and only if t has an edge (x, y) corresponding to (v, w), where corresponding to is determined by the procedure described below.  #@NEW_LINE#@#  
It might seem better to prevent the creation of noncorresponding edges in the scaffold in the first place, but this check is not easy to perform, so it is left for batch processing at this point.  #@NEW_LINE#@#  
To determine the edges of the TAG, the edges of each input tree t are traversed in preorder, and their corresponding scaffold edges are found.  #@NEW_LINE#@#  To help find the scaffold edges corresponding to input tree edges, we keep track of a set of scaffold nodes corresponding to each input tree node x; call this set m(x).  #@NEW_LINE#@#  The traversal is initialized with all higher taxon nodes within the subproblem which contain all of the terminal taxa identified as tips in the tree: i.e., m(root(t)) = all taxonomy nodes u such that ingroup(root(t))  ingroup(u).  #@NEW_LINE#@#  
Let (x, y) be the next edge in the input tree visited in the traversal, with y = parent(x).  #@NEW_LINE#@#  Then the edges (v, w) in the scaffold corresponding to (x, y) are those for which the following hold: (i) w  m(y); (ii) ingroup(x)  ingroup(v); (iii) outgroup(x)  outgroup(v); and (iv) v nestedchildof y.  #@NEW_LINE#@#  
Each edge (v, w) from the scaffold corresponding to some edge (x, y) in an input tree t gives rise in the TAG to an edge (v, w) with labels t and d. The traversal continues with m(x) equal to all nodes v for which (x, y) has a corresponding scaffold edge (v, w) as above.  #@NEW_LINE#@#  
Having now produced a TAG, the scaffold is no longer needed.  #@NEW_LINE#@#  


Generating_the_Synthetic_Tree  #@NEW_LINE#@#  
Once the TAG has been produced, we use an optimization procedure to find a tree, consisting of edges in the TAG, that generally prefers edges from high ranked trees to edges from lower ranked trees.  #@NEW_LINE#@#  The optimization works locally: For each TAG node, it selects one best combination of edges, from among all possible combinations, that would become the children of the node were that node to be included in the final synthetic tree.  #@NEW_LINE#@#  See Fig S6 for an overview.  #@NEW_LINE#@#  
For each TAG node v, let E(v) be the set of TAG edges that have v as their parent node.  #@NEW_LINE#@#  For each v, we select a subset R(v) of E(v) having the following two properties: (i) R(v) is a candidate subset: i.e., if v1 and v2 are child nodes of edges in R(v), then no taxon reachable from v1 is reachable from v2; i.e., the children of edges in R(v) are the root nodes of a nonoverlapping forest of synthetic subtrees; and (ii) R(v) is a best candidate subset of E(v) under the preference ordering, defined below.  #@NEW_LINE#@#  
The preference ordering on edge sets (which is consistent with the DGR score discussed above) is as follows: Given a candidate edge set S(v) and an alternate candidate edge set Salt(v), we say that S(v) is better than Salt(v) if, for some rank d, it contains more edges with rank d and contains an equal number of edges of any rank f  d where f is a rank represented by any other edge in E(v).  #@NEW_LINE#@#  (An edge has rank d if the tree it is labeled with has rank d.) If two candidates contain the same number of edges for all ranks in E(v), then we say that the candidate defining the forest of subtrees that contains the most tip nodes is better, and if they contain the same number of edges of each rank and the same number of tips then we say that they are equal.  #@NEW_LINE#@#  A best candidate Smax(v) is any candidate that is better than or equal to all other possible candidates S(v).  #@NEW_LINE#@#  If there is more than one best candidate for some node, then one is selected arbitrarily.  #@NEW_LINE#@#  
The synthetic tree is the tree Tr(r) where the root of the tree r is the TAG node specified to become the root.  #@NEW_LINE#@#  That is, r is supplied as an input to the synthesis procedure.  #@NEW_LINE#@#  
Due to conflicts among input trees, it is possible for some tips (taxa) to be left out of the resulting synthesis tree.  #@NEW_LINE#@#  
The final stage of synthesis involves the attachment of terminal taxa that could not be included by the main synthesis procedure discussed above.  #@NEW_LINE#@#  When a decision is made during synthesis to prefer a path that excludes a given node, then that contested node will not be included in the synthetic tree.  #@NEW_LINE#@#  When all of the paths to some terminal taxon pass through such contested nodes, then that terminal taxon will likewise not be included in the synthetic tree as it is generated by the procedure described in the previous section.  #@NEW_LINE#@#  We call such missing terminal taxa missing children.  #@NEW_LINE#@#  
Attaching these missing children to the synthetic tree thus requires the creation of additional TAG edges.  #@NEW_LINE#@#  Attachment of a missing child y occurs at the node in the synthetic tree closest to the tip that contains in its ingroup all taxonomic sister taxa of y.  #@NEW_LINE#@#  For example, if Pseudacris crucifer were not included in the tree, it would be attached to the most derived TAG node already present in the synthesis tree that serves as an ancestor for all Pseudacris species (Pseudacris feriarum, Pseudacris regilla, etc.).  #@NEW_LINE#@#  More formally, given y and immediate taxonomic parent z, find the full set ui of taxonomic terminal child nodes of z as well as the set xi of taxonomic terminal child nodes of z that are already present in the synthetic tree (which will be a subset of ui).  #@NEW_LINE#@#  The TAG node w, which represents the mrca of taxa xi in the synthesis tree, serves as the first potential attachment point of y.  #@NEW_LINE#@#  If node w contains in its ingroup all of ui, it serves as an appropriate attachment point of y.  #@NEW_LINE#@#  However, the ingroup of w may not contain all of ui: for example, if terminal taxa ui differ in their taxonomic nestedness below z (say, some taxa belong to a subgenus while others do not), the mrca node w may encompass a restricted set of ui (i.e., not including y).  #@NEW_LINE#@#  In this case, subsequent rootward nodes in the synthesis tree are tested until the first node that passes this condition is encountered.  #@NEW_LINE#@#  Performing this procedure ensures that all terminal taxa are present in the final synthetic tree.  #@NEW_LINE#@#  

Caveats_to_the_Synthesis_Method  #@NEW_LINE#@#  
The current methods for generating the first draft synthetic tree were designed to be computationally tractable at the very large scale that the tree of life represents, and their aim is to provide a result (the synthetic tree) that is a good approximation of the best possible tree summarizing the inputs.  #@NEW_LINE#@#  Here, we list known issues and caveats.  #@NEW_LINE#@#  

Assessing_Conflict  #@NEW_LINE#@#  
We measured support for the nodes in the supertree using an approach described by Wilkinson et al.  #@NEW_LINE#@#  (54).  #@NEW_LINE#@#  Let c be a clade in the supertree S and c be its restriction to the leaves of an input tree T: i.e., c contains only those leaves that are present in T. If c contains all of the leaves of T or fewer than two leaves, then T is irrelevant to c. T supports c if c is present in T. T conflicts with c when the induced bipartition (of c) contradicts the relationships in T (55).  #@NEW_LINE#@#  T permits c if c is a resolution of a polytomy in T; thus T is agnostic with respect to c. See Fig S7 for an example.  #@NEW_LINE#@#  First, we compared the taxonomy tree to the Open Tree of Life.  #@NEW_LINE#@#  There are 155,830 clades in the Open Tree of Life, and 129,502 (83.1%) of these clades are supported by the taxonomy tree.  #@NEW_LINE#@#  There are 5,340 (3.4%) clades in the Open Tree of Life that are in conflict with the taxonomy, and 20,988 (13.47%) that are permitted.  #@NEW_LINE#@#  
When we compare the collection of 484 nontaxonomy input trees to the Open Tree of Life, there are 30,550 (19.6%) clades in the Open Tree of Life that are unambiguously supported (i.e., 1 nontaxonomy input trees support, and 0 nontaxonomy input trees conflict with or permit, the node) and 589 (0.4%) clades that are in unambiguous conflict (i.e., 1 nontaxonomy input trees conflict with, and 0 nontaxonomy input trees support or permit, the node).  #@NEW_LINE#@#  However, 123,346 (79.2%) of the clades in the Open Tree of Life are irrelevant to the nontaxonomy input trees.  #@NEW_LINE#@#  Thus, the information for most of the clades in the Open Tree of Life is coming from the taxonomy.  #@NEW_LINE#@#  The remaining 1,345 (0.9%) nodes in the Open Tree of Life have a combination of support, conflict, and permit, instead of complete support or conflict, among the nontaxonomy input trees with respect to these clades.  #@NEW_LINE#@#  Overall, 3,286 clades in the Open Tree of Life are supported by at least two nontaxonomy input trees.  #@NEW_LINE#@#  When we compile all of the input trees together (the taxonomy tree and the 484 nontaxonomy input trees), there are 149,567 (96.0%) nodes in the Open Tree of Life that are unambiguously supported by all relevant input trees and 578 (0.4%) clades that are in unambiguous conflict.  #@NEW_LINE#@#  None of the all assessed clades was irrelevant to the input trees.  #@NEW_LINE#@#  The remaining 5,685 (3.7%) nodes in the Open Tree of Life have a combination of support, conflict, and permit, instead of complete support or conflict, among the nontaxonomy input trees with respect to these clades.  #@NEW_LINE#@#  Overall, 8,005 clades in the Open Tree of Life are supported by at least two taxonomy or nontaxonomy input trees.  #@NEW_LINE#@#  
In contrast, when we compare the collection of 484 nontaxonomy input trees with the MLS Tree of Life, there are 24,891 (16.4%) clades in the MLS Tree of Life that are unambiguously supported (i.e., 1 nontaxonomy input trees support, and 0 nontaxonomy input trees conflict with or permit, the node) and 2,013 (1.3%) clades that are in unambiguous conflict (i.e., 1 nontaxonomy input trees conflict with, and 0 nontaxonomy input trees support or permit, the node).  #@NEW_LINE#@#  However, 123,330 (81.4%) of the clades in the MLS Tree of Life are irrelevant to the nontaxonomy input trees.  #@NEW_LINE#@#  The remaining 1,224 (0.8%) nodes in the MLS Tree of Life have a combination of support, conflict, and permit, instead of complete support or conflict, among the nontaxonomy input trees with respect to these clades.  #@NEW_LINE#@#  Overall, 2,693 (1.8%) clades in the MLS Tree of Life are supported by at least two nontaxonomy input trees.  #@NEW_LINE#@#  
The software for conflict analysis is available at https://github.com/ruchiherself/AssessSupertrees.  #@NEW_LINE#@#  

Acknowledgments  #@NEW_LINE#@#  
We thank Paul Kirk (Index Fungorum), Tony Rees (Interim Register of Marine and Nonmarine Genera), and Markus Doering (Global Biodiversity Information Facility) for taxonomy data and advice on taxonomy synthesis; Mark Holder for discussion, feedback, and software development; Joseph Brown for data collection and curation, software development, data analysis, and writing; Pam Soltis for helpful comments on the manuscript; authors who made their tree files available in TreeBASE or Dryad and tree files that were not otherwise available; curators who imported trees and added metadata.  #@NEW_LINE#@#  This work was supported by National Science Foundation Assembling, Visualizing, and Analyzing the Tree of Life Grant 1208809.  #@NEW_LINE#@#  

Footnotes  #@NEW_LINE#@#  



